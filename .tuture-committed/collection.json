{
  "name": "一杯茶的时间,上手 TypeScript",
  "description": "",
  "id": "cea18bc864f7a9b94223dcc718646b02",
  "created": "2020-03-04T03:02:15.850Z",
  "articles": [
    {
      "name": "类型即正义：TypeScript 从入门到实践（序言）",
      "description": "本文通过动手实践的方式带你搭建一个 TypeScript 版本的 React 项目，并且配置了 Ant Design 组件库，为整个TypeScript 从入门到实践系列实战教程准备初始代码。",
      "id": "cea18bc864f7a9b94223dcc718646b02",
      "topics": [
        "TypeScript",
        "React"
      ],
      "cover": "https://static.tuture.co/c/cea18bc864f7a9b94223dcc718646b02/ts1-044f5e5a2ecd6e8c.png",
      "created": "2020-04-06T01:47:37.842Z"
    },
    {
      "id": "C_ao1Yvqy",
      "created": "2020-04-06T01:46:37.842Z",
      "name": "类型即正义：TypeScript 从入门到实践（一）",
      "topics": [
        "TypeScript",
        "React"
      ],
      "cover": "https://static.tuture.co/c/cea18bc864f7a9b94223dcc718646b02/ts2-5185d2d4eef2179f.png",
      "description": "JavaScript 已经占领了世界上的每一个角落，能访问网页的地方，基本上就有 JavaScript 在运作，然而 JavaScript 因为其动态、弱类型、解释型语言的特性、出错的调用栈隐蔽，使得开发者不仅在调试错误上花费大把时间，在团队协作开发时理解队友编写代码也极其困难。TypeScript 的出现极大的解决了上面的问题，TypeScript -- 一个 JavaScript 的超集，它作为一门编译型语言，提供了对类型系统和最新 ES 语法的支持，使得我们可以在享受使用 ES 最新语法的编写代码的同时，还能在写代码的过程中就规避很多潜在的语法、语义错误；并且其提供的类型系统使得我们可以在团队协作编写代码时可以很容易的了解队友代码的含义：输入和输出，大大提高了团队协作编写大型业务应用的效率。在现代 JavaScript 世界中，已经有很多大型库在使用 TypeScript 重构，包括前端三大框架：React、Vue、Angular，还有知名的组件库 antd，material，在很多公司内部的大型业务应用也在用 TypeScript 开发甚至重写现有的应用，所以如果你想编写大型业务应用或库，或者想写出更利于团队协作的代码，那么 TypeScript 有十足的理由值得你学习！本文是 TypeScript 系列教程的第一篇，主要通过使用 antd 组件库实战演练一个 TypeScript 版本 React TodoList 应用来讲解 TypeScript 的语法，使得你能在学会语法的同时还能完成一个实际可运行的项目。"
    },
    {
      "id": "H2r1tpF_v",
      "created": "2020-04-06T10:20:24.050Z",
      "name": "类型即正义：TypeScript 从入门到实践（二）",
      "topics": [
        "TypeScript",
        "React"
      ],
      "cover": "https://static.tuture.co/c/cea18bc864f7a9b94223dcc718646b02/ts4.png",
      "description": "了解了基础的 TS 类型，接口之后，我们开始了解如何给更加复杂的结构注解类型，这就是我们这节里面要引出的函数，进而我们讲解如何对类型进行运算：交叉类型和联合类型，最后我们讲解了最原子类型：字面量类型，以及如何与联合类型搭配实现类型守卫效果。"
    }
  ],
  "steps": [
    {
      "type": "step",
      "id": "FrAynCUC",
      "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
      "children": [
        {
          "type": "heading-two",
          "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
          "id": "qGC33dA5B",
          "fixed": true,
          "children": [
            {
              "text": "Initialize project using Create React App"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": ".gitignore",
          "display": false,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".gitignore",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "README.md",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "README.md",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "package.json",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/favicon.ico",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/favicon.ico",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/index.html",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/index.html",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/logo192.png",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/logo192.png",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/logo512.png",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/logo512.png",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/manifest.json",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/manifest.json",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "public/robots.txt",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "public/robots.txt",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/App.css",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.css",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/App.test.tsx",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.test.tsx",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/App.tsx",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.tsx",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.css",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.css",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.tsx",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.tsx",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/logo.svg",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/logo.svg",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/react-app-env.d.ts",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/react-app-env.d.ts",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/serviceWorker.ts",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/serviceWorker.ts",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/setupTests.ts",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/setupTests.ts",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "tsconfig.json",
          "display": true,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "tsconfig.json",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "yarn.lock",
          "display": false,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "yarn.lock",
              "commit": "fde6d949be57729c31ac326c24a0652d6a53267e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
      "id": "a4w1VbT4C",
      "articleId": "cea18bc864f7a9b94223dcc718646b02",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
          "id": "YTarZZsHP",
          "fixed": true,
          "children": [
            {
              "text": "准备代码"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "numbered-list",
              "children": [
                {
                  "text": "因为需要尽可能全且精炼的讲解 TypeScript 语法知识，所以我们需要一个恰到好处的实战项目，这一小节主要是用于讲解我们准备初始 TypeScript 版本的 React 项目代码的过程，在下一个小节中我们将会结合 React 项目代码，真正开始 TypeScript 语法的讲解。",
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 1
                },
                {
                  "text": "",
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 2
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "本文所涉及的源代码都放在了 ",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 2
                    },
                    {
                      "text": "Github",
                      "link": true,
                      "url": "https://github.com/tuture-dev/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 3
                    },
                    {
                      "text": "  或者 ",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 4
                    },
                    {
                      "text": "Gitee",
                      "link": true,
                      "url": "https://gitee.com/tuture/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 5
                    },
                    {
                      "text": " 上，如果您觉得我们写得还不错，希望您能给",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 6
                    },
                    {
                      "text": "❤️这篇文章点赞+",
                      "bold": true,
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 7
                    },
                    {
                      "text": "Github",
                      "bold": true,
                      "link": true,
                      "url": "https://github.com/tuture-dev/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 8
                    },
                    {
                      "text": " 或 ",
                      "bold": true,
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 9
                    },
                    {
                      "text": "Gitee",
                      "bold": true,
                      "link": true,
                      "url": "https://gitee.com/tuture/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 10
                    },
                    {
                      "text": " 仓库加星❤",
                      "bold": true,
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 11
                    },
                    {
                      "text": "️哦~",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 12
                    }
                  ]
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "此教程属于 "
                    },
                    {
                      "text": "React 前端工程师学习路线",
                      "link": true,
                      "url": "https://github.com/tuture-dev/react-roadmap"
                    },
                    {
                      "text": "的一部分，欢迎来 Star 一波，鼓励我们继续创作出更好的教程，持续更新中~"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "前提条件"
                }
              ],
              "id": "1NdyR4i1"
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "确保你已经安装了 Node.js，可以访问官网安装："
                    },
                    {
                      "text": "官网地址",
                      "link": true,
                      "url": "https://nodejs.org/en/"
                    },
                    {
                      "text": "。"
                    }
                  ],
                  "id": "P5O7r0Vw",
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "确保你已经了解基本的 React 开发知识，图雀社区有一篇很好的 "
                    },
                    {
                      "text": "React 入门教程",
                      "link": true,
                      "url": "https://tuture.co/2019/11/18/07acf61/"
                    },
                    {
                      "text": "，你可以通过学习它很快的上手 React。"
                    }
                  ],
                  "id": "P5O7r0Vw",
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "确保你有一定的命令行使用基础，包括使用 Npm （Node.js 包管理工具）来安装包。"
                    }
                  ],
                  "id": "P5O7r0Vw",
                  "level": 0,
                  "parent": "numbered-list",
                  "number": 3
                }
              ]
            }
          ]
        },
        {
          "file": "package.json",
          "display": true,
          "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "初始化应用"
                    }
                  ],
                  "id": "Ve3OOJYV"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "初始一个 React 应用的最佳方式那么一定是 React 官方维护的 "
                    },
                    {
                      "text": "Create React App",
                      "link": true,
                      "url": "https://github.com/facebook/create-react-app"
                    },
                    {
                      "text": " 脚手架了，我们打开终端，运行如下命令来初始化一个 TypeScript 版本的 React 应用："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ npx create-react-app typescript-tea --template typescript"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "运行如上命令，命令行里面应该会有一系列输出，等待几分钟，就会提示已经初始化完成，并提供了对于的命令来帮助你开启项目，我们根据提示输入如下命令来开启项目："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ cd typescript-tea"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ npm start"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "运行如上命令之后，会自动开启 Webpack 开发服务器，并打开浏览器窗户，访问 "
                    },
                    {
                      "text": "http://localhost:3000/",
                      "link": true,
                      "url": "http://localhost:3000/"
                    },
                    {
                      "text": " 来展示你的应用初始界面："
                    }
                  ]
                },
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/cea18bc864f7a9b94223dcc718646b02/image.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": "如果看到这个界面，恭喜你🥳！成功创建一个 TypeScript 版本的 React 应用！"
                    }
                  ]
                },
                {
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "在下文中，为了简化语言，我们统一称 TypeScript 为 TS。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "引入 antd 组件库"
                    }
                  ],
                  "id": "fvc0l_Mx"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "实战驱动的技术学习能带给我们成就感，便捷好用的包可以加快我们的开发效率，好看的界面可以提高我们的审美能力，缓解学习疲劳。在这篇教程的讲解过程中，我们将通过 "
                    },
                    {
                      "text": "Ant Design",
                      "link": true,
                      "url": "https://ant.design/index-cn"
                    },
                    {
                      "text": " 对应的 React 组件库 "
                    },
                    {
                      "text": "antd",
                      "link": true,
                      "url": "https://github.com/ant-design/ant-design"
                    },
                    {
                      "text": " 来辅助我们项目的编写，使得我们可以专注于讲解 TS 的核心知识，而不被繁杂的界面语言所干扰，还能做出对应相应完成的目标功能。"
                    }
                  ],
                  "id": "b0UpFoZ4"
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "Ant Design ",
                          "link": true,
                          "url": "https://ant.design/index-cn"
                        },
                        {
                          "text": "是蚂蚁金服孵化的一套企业级产品设计体系，提供了完备的 TS 类型定义，使得我们可以很方便的在 TS 项目中使用，在最近发布了 4.0 版本，致力于创造高效愉悦的工作体验。"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "除此之外 Ant Design 的周边生态也很丰富："
                        }
                      ]
                    },
                    {
                      "type": "bulleted-list",
                      "children": [
                        {
                          "type": "list-item",
                          "children": [
                            {
                              "text": "包括新一代数据可视化解决方案："
                            },
                            {
                              "text": "AntV",
                              "link": true,
                              "url": "https://antv.vision/zh"
                            }
                          ],
                          "level": 0,
                          "parent": "bulleted-list"
                        },
                        {
                          "type": "list-item",
                          "children": [
                            {
                              "text": "一个基于 Preact / React / React Native 的 UI 组件库："
                            },
                            {
                              "text": "Ant Design Mobile",
                              "link": true,
                              "url": "https://mobile.ant.design/index-cn"
                            }
                          ],
                          "level": 0,
                          "parent": "bulleted-list"
                        },
                        {
                          "type": "list-item",
                          "children": [
                            {
                              "text": "开箱即用的中台前端/设计解决方案："
                            },
                            {
                              "text": "Ant Design Pro",
                              "link": true,
                              "url": "https://pro.ant.design/index-cn"
                            }
                          ],
                          "level": 0,
                          "parent": "bulleted-list"
                        },
                        {
                          "type": "list-item",
                          "children": [
                            {
                              "text": "插画设计："
                            },
                            {
                              "text": "海兔",
                              "link": true,
                              "url": "https://ant.design/docs/spec/illustration-cn"
                            }
                          ],
                          "level": 0,
                          "parent": "bulleted-list"
                        },
                        {
                          "type": "list-item",
                          "children": [
                            {
                              "text": "一款为设计者提升工作效率的 Sketch 工具集 ： "
                            },
                            {
                              "text": "Kitchen",
                              "link": true,
                              "url": "https://kitchen.alipay.com/"
                            }
                          ],
                          "level": 0,
                          "parent": "bulleted-list"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "后面图雀社区计划围绕 Ant Design 生态撰写一系列教程，帮助大家提高设计、开发效率，敬请期待！✌️",
                          "url": "https://kitchen.alipay.com/"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "安装依赖",
                      "url": "https://kitchen.alipay.com/"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list",
                  "id": "g9xC_KbC"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "好了，大致介绍了 antd 组件库及 Ant Design 周边之后，我们马上来写代码引入 antd，打开命令行，在其中输入如下命令：",
                      "url": "https://kitchen.alipay.com/"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ npm install antd"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "运行上面的命令安装完依赖之后就可以在项目中使用了，但是为了更好的定制样式和按需引用以减小打包之后的包体积，我们还需要做一点定制化的操作，打开命令行，依次安装如下依赖："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ npm install react-app-rewired customize-cra babel-plugin-import less less-loader "
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "注意到上面我们安装了很多包，我们来依次解释一下上面各种包的意思："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "react-app-rewired：用来定制化 Create React App （CRA)脚手架的一些配置，比如 Webpack、Babel 等，因为 CRA 它是一个封闭的黑盒，不允许开发者直接定制，但有时候我们需要对配置做一些修改，比如这里需要配置 antd 的按需引用。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "customize-cra：是 CRA 在发布 2.0 之后出来的一个辅助 react-app-rewired 更方便定制 CRA 的 Webpack 配置的一个库，它提供了一些开箱即用的 API。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "babel-plugin-import：是配置可供开发者按需引用 antd 组件的一个 Babel 插件"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "less 和 less-loader：是我们用于定制化 antd 的主题需要的 Webpack loader，因为 antd 使用 less 作为样式化语言。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后我们安装一个在 Ant Design 4.0 拆分出去的 icons 包，可以用来按需引用 icons，进一步减少最后的打包体积，继续在命令行运行如下命令："
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ npm install @ant-design/icons"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "大功告成！现在我们所有的依赖以及安装完成。接下来就需要改写一下 CRA 之前通过 "
                    },
                    {
                      "text": "react-scripts",
                      "code": true
                    },
                    {
                      "text": "  跑开发构建的流程，用我们安装的 "
                    },
                    {
                      "text": "react-app-rewired",
                      "code": true
                    },
                    {
                      "text": "  脚本来替换它，当安装完了所以依赖，以及用"
                    },
                    {
                      "text": "react-app-rewired",
                      "code": true
                    },
                    {
                      "text": "   替换 "
                    },
                    {
                      "text": "react-scripts",
                      "code": true
                    },
                    {
                      "text": "  之后，我们的 "
                    },
                    {
                      "text": "package.json",
                      "code": true
                    },
                    {
                      "text": "  文件应该是下面的样子："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
              "hiddenLines": [
                [
                  0,
                  1
                ],
                [
                  33,
                  48
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "config-overrides.js",
          "display": true,
          "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "修改配置"
                    }
                  ],
                  "id": "V63VF7AY"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "安装完依赖之后，我们要确保对应改写 CRA 流程的配置生效，我们需要根据 "
                    },
                    {
                      "text": "react-app-rewired",
                      "code": true
                    },
                    {
                      "text": " 的文档说明在根目录下建立 "
                    },
                    {
                      "text": "config-overrides.js",
                      "code": true
                    },
                    {
                      "text": " 文件，并在其中编写如下的内容："
                    }
                  ],
                  "id": "7Gsv9BxO"
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "config-overrides.js",
              "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的代码主要是导出一个用于修改 Webpack 配置的对象，使用 "
                    },
                    {
                      "text": "override",
                      "code": true
                    },
                    {
                      "text": " API，接收两个修改配置的函数调用，"
                    },
                    {
                      "text": "fixBabelImports",
                      "code": true
                    },
                    {
                      "text": " 用于配置 antd 的按需引用，"
                    },
                    {
                      "text": "addLessLoader",
                      "code": true
                    },
                    {
                      "text": " 用于配置 antd 的主题，这里我们使用了 Ant Design 4.0 新带来的 Dark Mode（暗色模式），然后配置了主题色为图雀社区的主题色："
                    },
                    {
                      "text": "#02b875",
                      "code": true
                    },
                    {
                      "text": " ，代表希望的绿色。😆"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "自此，我们就引入了 antd 组件库，并进行了按需配置使用以及配置主题色和使用了 Ant Design 最新的暗色主题 -- Dark Mode。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.tsx",
          "display": true,
          "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "编写初始代码"
                    }
                  ],
                  "id": "0JCteUmB"
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "准备逻辑部分"
                    }
                  ],
                  "id": "7A55zZgw"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接下来，我们将使用 antd 帮助我们快速的编写一下我们即将实现的待办事项的界面，打开 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " ，对其中的代码做出对应的修改如下："
                    }
                  ],
                  "id": "3tYKzGsO"
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.tsx",
              "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
              "hiddenLines": [
                [
                  191,
                  192
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.css",
          "display": true,
          "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "上面的代码主要就是一系列初始数据的准备，antd 组件的使用，编写起来的大致轮廓，还没有涉及到任何的 TS 语法，但这个是我们开始项目的基础，读者只需要进行简单的复制放进现有的 "
                    },
                    {
                      "text": "typescript-tea",
                      "code": true
                    },
                    {
                      "text": " 项目中对应的 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": "  中即可。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "准备样式部分"
                    }
                  ],
                  "id": "Tc39YkDF"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "准备了逻辑代码之后，为了让我们最后的待办事项在样式上更美观一点，也利于我们讲解时的操作，我们需要给项目加一点样式，打开 "
                    },
                    {
                      "text": "src/App.css",
                      "code": true
                    },
                    {
                      "text": " 对其中的代码做出对应的修改如下："
                    }
                  ],
                  "id": "ruXvaDpP"
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.css",
              "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "好了！所有的准备工作已经就绪，在开始下一节真正的 TS 学习之前，我们先来回顾一下我们在这个小节中所完成的工作："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "使用 CRA 的 TypeScript 脚本初始化了一个 TS 版的 React 项目"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "安装了 antd 组件库，并使用 "
                        },
                        {
                          "text": "react-app-rewired",
                          "code": true
                        },
                        {
                          "text": " 替换默认的 "
                        },
                        {
                          "text": "react-scripts",
                          "code": true
                        },
                        {
                          "text": " 来完成对 CRA 的 Webpack 配置进行修改，以是我们可以获得 antd 组件的按需引用和主题定制的功能"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "准备了初始待办事项代码的逻辑部分和样式部分"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在前面铺垫了大量的 TypeScript 的优点以及花了不少笔墨来准备初始代码，想必读到这里的读者们可能已经等不及要马上见识一下 TS 的庐山真面目了吧！马上就来啦！"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/logo.svg",
          "display": false,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/logo.svg",
              "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "yarn.lock",
          "display": false,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "yarn.lock",
              "commit": "756b2d45f9790caf91ab4c76c23dec06b7bf9da8",
              "hiddenLines": [
                [
                  0,
                  0
                ],
                [
                  40,
                  212
                ],
                [
                  221,
                  959
                ],
                [
                  968,
                  1771
                ],
                [
                  1785,
                  1889
                ],
                [
                  1947,
                  2020
                ],
                [
                  2032,
                  2055
                ],
                [
                  2064,
                  2122
                ],
                [
                  2134,
                  2230
                ],
                [
                  2245,
                  2314
                ],
                [
                  2323,
                  2840
                ],
                [
                  2852,
                  2907
                ],
                [
                  2919,
                  3006
                ],
                [
                  3030,
                  3050
                ],
                [
                  3062,
                  3146
                ],
                [
                  3160,
                  3265
                ],
                [
                  3280,
                  3491
                ],
                [
                  3505,
                  3532
                ],
                [
                  3544,
                  3740
                ],
                [
                  3752,
                  3927
                ],
                [
                  3936,
                  4887
                ],
                [
                  4899,
                  5010
                ],
                [
                  5022,
                  5215
                ],
                [
                  5227,
                  5349
                ],
                [
                  5361,
                  6283
                ],
                [
                  6297,
                  6410
                ],
                [
                  6443,
                  6540
                ],
                [
                  6552,
                  6769
                ],
                [
                  6778,
                  6800
                ],
                [
                  6817,
                  6897
                ],
                [
                  6917,
                  7148
                ],
                [
                  7157,
                  7255
                ],
                [
                  7269,
                  8445
                ],
                [
                  8459,
                  8467
                ],
                [
                  8476,
                  8585
                ],
                [
                  8594,
                  8623
                ],
                [
                  8965,
                  8970
                ],
                [
                  8984,
                  9022
                ],
                [
                  9040,
                  9327
                ],
                [
                  9336,
                  9374
                ],
                [
                  9386,
                  9499
                ],
                [
                  9514,
                  9623
                ],
                [
                  9637,
                  9759
                ],
                [
                  9771,
                  10091
                ],
                [
                  10103,
                  10420
                ],
                [
                  10432,
                  10479
                ],
                [
                  10491,
                  10832
                ],
                [
                  10846,
                  11328
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "本文所涉及的源代码都放在了 ",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 2
                    },
                    {
                      "text": "Github",
                      "link": true,
                      "url": "https://github.com/tuture-dev/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 3
                    },
                    {
                      "text": "  或者 ",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 4
                    },
                    {
                      "text": "Gitee",
                      "link": true,
                      "url": "https://gitee.com/tuture/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 5
                    },
                    {
                      "text": " 上，如果您觉得我们写得还不错，希望您能给",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 6
                    },
                    {
                      "text": "❤️这篇文章点赞+",
                      "bold": true,
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 7
                    },
                    {
                      "text": "Github",
                      "bold": true,
                      "link": true,
                      "url": "https://github.com/tuture-dev/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 8
                    },
                    {
                      "text": " 或 ",
                      "bold": true,
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 9
                    },
                    {
                      "text": "Gitee",
                      "bold": true,
                      "link": true,
                      "url": "https://gitee.com/tuture/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 10
                    },
                    {
                      "text": " 仓库加星❤",
                      "bold": true,
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 11
                    },
                    {
                      "text": "️哦~",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 12
                    }
                  ]
                }
              ]
            },
            {
              "type": "image",
              "url": "https://user-gold-cdn.xitu.io/2019/12/19/16f1ddb37a4d47a8?w=900&h=500&f=png&s=138401",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "2726f1094dd6830a85bfe273da795628856b00dd",
      "id": "luz5AxX0g",
      "articleId": "C_ao1Yvqy",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "children": [
            {
              "text": "TypeScript 初探"
            }
          ],
          "id": "lAhxZu6Sc"
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "正式 TS 时间☕️，TS 是一门静态编程语言，它是 JavaScript 的超集。首先我们先来解释一下什么是编程语言，然后我们再来引出 TypeScript 是什么。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "编程语言是什么？"
                }
              ],
              "id": "TRfpkg57"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "那么什么是编程语言了？编程语言是用来定义计算机程序的形式语言。它是一种被标准化的交流技巧，用来向计算机发出指令。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们拿 JS 来举例，一门标准的编程语言一般包含如下几个部分："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "数据结构：如原始数据类型 string/number/void 等，非原始数据类型 array/object/enum 等"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "控制结构：如 if/else 、 switch 、while、for 循环等"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "组织结构：如 函数、类"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "特性：如 JS 的原型链"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "常用的 API：如 isNaN 判断是不是非数字，toFixed 将小数进行四舍五入操作"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "运行环境：如 浏览器端的 JavaScript、服务器端的 Node"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "其中前五种又称为语言内核，也就是我们常常喊的 ECMAScript 2015，或者 ES6；最后一个运行环境在浏览器端结合 BOM/DOM 即成为 JavaScript，在服务器端结合一些文件/网络的操作即成为 Node。"
                }
              ],
              "level": 0,
              "parent": "bulleted-list"
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "TypeScript 是什么？"
                }
              ],
              "level": 0,
              "parent": "bulleted-list",
              "id": "jjX8lRqy"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "而 TS，作为 JavaScript 的超集，包含着两类属性："
                }
              ],
              "level": 0,
              "parent": "bulleted-list"
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "属于 JavaScript 端的编程语言特性，使得我们可以执行各种 JavaScript 相关的操作：变量声明、编写 if/else 控制流、使用循环处理重复任务、使用函数执行特定的任务块、使用类来组织和复用代码和模拟真实世界的操作等，还有新特性比如：装饰器、Iterator、Generator 这些。这类特性在此篇文章中，我们默认你已经很清楚了，不会做过多的讲解。"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "属于 TypeScript 端独有的特性：类型，它也具有一套编程语言的特性，比如标志一个变量是 string 类型，一个函数的参数有三个，它们的类型分别是 string/number/boolean，返回类型为 never等，这是基础类型，我们甚至可以基于类型进行编程，使用类型版本的控制、组织结构来完成高级类型的编写，进而将类型附着在 JavaScript 对应的编程语言特性上，将 JS 静态化，使得我们可以在编译期间就能发现类型上的错误，这一特性是我们本篇文章的重点。"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "好的，读到这里，相比很多读者已经清楚了，其实 TS 没什么神秘的，主要就是设计了一套类似编程语言的类型语言，然后将这些类型附着在原 JavaScript 的语言之上，给其加上类型限制使得其静态化，进而可以快速的在编写时发现很多潜在的问题，帮助我们编写错误率更低，更适合团队协作的代码，这也是 TypeScript 适合编写大型的业务应用的原因。"
                }
              ],
              "level": 0,
              "parent": "bulleted-list"
            }
          ]
        },
        {
          "type": "file",
          "file": ".gitignore",
          "display": false,
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".gitignore",
              "commit": "2726f1094dd6830a85bfe273da795628856b00dd",
              "hiddenLines": [
                [
                  0,
                  19
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.tsx",
          "display": true,
          "commit": "2726f1094dd6830a85bfe273da795628856b00dd",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "类型语言之数据结构"
                    }
                  ],
                  "id": "1MeWB7ct"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "其中 TS 数据结构又包含原始类型、非原始类型、特殊类型和高级类型等几类。我们将结合在 TS 类型侧的定义，以及附着在 JS 上进行实战来讲解。"
                    }
                  ],
                  "id": "VFSX4T8K"
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "原始类型"
                    }
                  ],
                  "id": "4DfVlkTX"
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": "TS 类型侧的定义"
                    }
                  ],
                  "id": "pECJ_JAf"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "和 JS 中的原始数据类型一样，TS 对应着一致的类型定义，包括下面八种："
                    }
                  ],
                  "id": "3PnEoSPs"
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "number"
                        }
                      ],
                      "id": "3PnEoSPs",
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "string"
                        }
                      ],
                      "id": "3PnEoSPs",
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "boolean"
                        }
                      ],
                      "id": "3PnEoSPs",
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "null"
                        }
                      ],
                      "id": "3PnEoSPs",
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "undefined"
                        }
                      ],
                      "id": "3PnEoSPs",
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "void"
                        }
                      ],
                      "id": "3PnEoSPs",
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "symbol"
                        }
                      ],
                      "id": "3PnEoSPs",
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "bigint"
                        }
                      ],
                      "id": "3PnEoSPs",
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "其中前六种是 ES5 中就有的，symbol 从 ES6 开始引入，bigint 是 ES2020 新引进的。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "上面是 TS 的原始类型，我们之前提到 TS 就是将类型附着在 JS 上，将其类型化，那么我们来看看上面的原始类型如何附着在 JS 上，将其类型化。"
                    }
                  ],
                  "id": "3PnEoSPs",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": "附着在 JS 上的实战"
                    }
                  ],
                  "id": "hMl-WdE9",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "TS 通过独特的"
                    },
                    {
                      "text": "冒号语法",
                      "bold": true
                    },
                    {
                      "text": "来将其类型侧定义的类型附着在 JS 上，我们来看几个例子："
                    }
                  ],
                  "id": "7do0GePQ",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "用 JS 语言来写图雀社区的 Slogan，我们一般会这么写："
                    }
                  ],
                  "id": "7do0GePQ",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "code-block",
                  "lang": "js",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const tutureSlogan = '图雀社区，汇聚精彩的免费实战教程';"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们可以确定，这句 Slogan 是一个 string 类型的，所以我们用对应的 TS 类型附着在其变量定义上如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "typescript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const tutureSlogan: string = '图雀社区，汇聚精彩的免费实战教程';"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这样我们就给原 JS 的 "
                    },
                    {
                      "text": "tutureSlogan",
                      "code": true
                    },
                    {
                      "text": "  变量加上了类型定义，它是一个 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": "  类型的变量，通过这样的操作，原 JS 变量的类型就被静态化了，在初始化时，就不能再赋值其他的类型给这个 "
                    },
                    {
                      "text": "tutureSlogan",
                      "code": true
                    },
                    {
                      "text": " 变量了，比如我们将 "
                    },
                    {
                      "text": "number",
                      "code": true
                    },
                    {
                      "text": " 类型的字面量赋值给 "
                    },
                    {
                      "text": "tutureSlogan",
                      "code": true
                    },
                    {
                      "text": " ，就会报错："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const tutureSlogan: string = 5201314 // 报错 Type '5201314' is not assignable to Type 'string'"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这就是 TS 的强大之处，当团队编码时事先约定好数据的类型，那么后续编写并调用这些设置好类型的变量时就会强制起约束作用，就像上面的代码一样，如果给 "
                    },
                    {
                      "text": "tutureSlogan",
                      "code": true
                    },
                    {
                      "text": " 赋值  "
                    },
                    {
                      "text": "5201314",
                      "code": true
                    },
                    {
                      "text": " 就会报错，其实你大可克制一点对吧😌，给 "
                    },
                    {
                      "text": "5201314",
                      "code": true
                    },
                    {
                      "text": " 加个限制，两边带上引号 "
                    },
                    {
                      "text": "'5201314'",
                      "code": true
                    },
                    {
                      "text": " 问题就迎刃而解了，爱也可以是克制🤓。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "有些细心的同学可能对上面的报错信息有点不能理解，对于报错信息的后半段类型 "
                        },
                        {
                          "text": "string",
                          "code": true
                        },
                        {
                          "text": " 可能理解，因为我们给 "
                        },
                        {
                          "text": "tutureSlogan",
                          "code": true
                        },
                        {
                          "text": " 限制了 "
                        },
                        {
                          "text": "string",
                          "code": true
                        },
                        {
                          "text": " 类型，但是对于我们的赋值 "
                        },
                        {
                          "text": "5201314",
                          "code": true
                        },
                        {
                          "text": " ，它原本是一个 JS 的 number 类型的字面量，为什么也成了 "
                        },
                        {
                          "text": "Type",
                          "code": true
                        },
                        {
                          "text": " 了？"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "那是因为，TS 引擎在对语句进行编译的时候，会对变量赋值两端做一个类型推理，比如对赋值语句的右侧 "
                        },
                        {
                          "text": "5201314",
                          "code": true
                        },
                        {
                          "text": " ，会将其推理成 "
                        },
                        {
                          "text": "5201314",
                          "code": true
                        },
                        {
                          "text": " 这个类型，它是一个属于 "
                        },
                        {
                          "text": "number",
                          "code": true
                        },
                        {
                          "text": " 类型的一个特殊的 "
                        },
                        {
                          "text": "number",
                          "code": true
                        },
                        {
                          "text": " 类型，可以被分配（"
                        },
                        {
                          "text": "assignable",
                          "code": true
                        },
                        {
                          "text": " )给 "
                        },
                        {
                          "text": "number",
                          "code": true
                        },
                        {
                          "text": " 类型的变量，这里的 "
                        },
                        {
                          "text": "assignable",
                          "code": true
                        },
                        {
                          "text": " 是可分配的意思，就是一个子类型可以被分配给一个父类型，比如数字 1 可以被分配给 number 数字类型，但因为 number 类型和 string 类型是冲突的，所以这里报错了。"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "这里读者可能会有感觉了就是，你写的 JS 语句，加上类型定义之后，在 TS 编译器的世界里，一切皆类型了，它会以一种类型的视角去看待原 JS 语句，比如上面的语句，在 TS 编译器眼里，就是 "
                        },
                        {
                          "text": "5201314",
                          "code": true
                        },
                        {
                          "text": " 类型和 "
                        },
                        {
                          "text": "string",
                          "code": true
                        },
                        {
                          "text": " 类型的一个比较过程，如果比较一致，那么好的，我 TS 编译器今天就放你一马，让你逍遥快活。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": "小结"
                    }
                  ],
                  "id": "ZrUJ76oF"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们上面说到了 TS 的原始类型，一共有八个之多，并且通过其中的 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 类型来讲解了如何将 TS 类型附着在原 JS 语法上以静态化 JS 语言，剩下的 7 个原始类型的用法和 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 类型类似，我们将在之后的讲解中逐渐用到其中的类型。"
                    }
                  ],
                  "id": "L39OuNRO"
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "非原始类型"
                    }
                  ],
                  "id": "CDyvM04B"
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": "TS 类型侧的定义"
                    }
                  ],
                  "id": "JVoZYqep"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "同样的 JS 中的非原始数据类型一样，TS 中也存在非原始类型，表示出了八种原始类型之外的类型，非原始类型也称为是 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " 类型。"
                    }
                  ],
                  "id": "fY0-6sPp"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "实际上 TS 中还有几个常见的非原始类型，例举如下："
                    }
                  ],
                  "id": "fY0-6sPp"
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "array"
                        }
                      ],
                      "id": "fY0-6sPp",
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "tuple"
                        }
                      ],
                      "id": "fY0-6sPp",
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "enum"
                        }
                      ],
                      "id": "fY0-6sPp",
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "且因为它们属于 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " 类型，所以 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " 类型实际上就代表了非原始类型。在上面的三个类型以及其父类型 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " 中，"
                    },
                    {
                      "text": "array",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " 其实我们应该有点熟悉，至于 "
                    },
                    {
                      "text": "tuple",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "enum",
                      "code": true
                    },
                    {
                      "text": " 则是 TS 中新增的类型，JS 中正式提案中目前是没有的。讲完了类型侧定义，我们马上来实践一下上面的 "
                    },
                    {
                      "text": "array",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "enum",
                      "code": true
                    },
                    {
                      "text": " 非原始类型。"
                    }
                  ],
                  "id": "fY0-6sPp",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": " array 类型附着实战"
                    }
                  ],
                  "id": "aTWmrSy4",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "其中 "
                    },
                    {
                      "text": "array",
                      "code": true
                    },
                    {
                      "text": " 类型我们比较熟悉，但这里有个不同就是之前我们的 JS 因为是动态语言，所以一个数组里面可以有各种不同的数据类型项，比如我们看如下 JS 语句："
                    }
                  ],
                  "id": "fY0-6sPp",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "code-block",
                  "lang": "js",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const arr = ['1', 2, '3'];"
                        }
                      ],
                      "id": "fY0-6sPp",
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，从 TS 的角度去看这个数组变量 "
                    },
                    {
                      "text": "arr",
                      "code": true
                    },
                    {
                      "text": " 所包含的类型，存在字符串类型 "
                    },
                    {
                      "text": "'1'",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "'3'",
                      "code": true
                    },
                    {
                      "text": " ，以及数字类型 "
                    },
                    {
                      "text": "2",
                      "code": true
                    },
                    {
                      "text": " 。但 TS 总的数组类型要求数组中的元素都是同一个类型，不允许动态变化，比如我们为上面的数组变量 "
                    },
                    {
                      "text": "arr",
                      "code": true
                    },
                    {
                      "text": " 声明类型应该如下："
                    }
                  ],
                  "id": "fY0-6sPp",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const arr: string[] = ['1', '2', '3'];"
                        }
                      ],
                      "id": "fY0-6sPp",
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们给变量 "
                    },
                    {
                      "text": "arr",
                      "code": true
                    },
                    {
                      "text": " 声明了 "
                    },
                    {
                      "text": "string[]",
                      "code": true
                    },
                    {
                      "text": " 类型，即一个 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 类型后面跟着一个数组标志，表示是字符串数组类型，当声明了 "
                    },
                    {
                      "text": "string[]",
                      "code": true
                    },
                    {
                      "text": " 类型之后，我们需要把之前的数组 "
                    },
                    {
                      "text": "2",
                      "code": true
                    },
                    {
                      "text": " 改成字符串 "
                    },
                    {
                      "text": "'2'",
                      "code": true
                    },
                    {
                      "text": " 。"
                    }
                  ],
                  "id": "fY0-6sPp",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们注意到 "
                    },
                    {
                      "text": "array",
                      "code": true
                    },
                    {
                      "text": " 类型，它要求数组中每项的类型都一样，一般应用在数组的长度未知的情况，用特定的类型，比如 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 类型来约束数组的每一项。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然而从 JS 转过来的同学大多数同学可能对这个 "
                    },
                    {
                      "text": "array",
                      "code": true
                    },
                    {
                      "text": " 类型不适应了，我们 JS 的同学经常会遇到编写一个数组，其中的多项的类型不一样，就和我们上面的 JS "
                    },
                    {
                      "text": "arr",
                      "code": true
                    },
                    {
                      "text": " 的项一样，既有 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 类型又有 "
                    },
                    {
                      "text": "number",
                      "code": true
                    },
                    {
                      "text": " 类型，那这该怎么办了？还好！TS 的设计者也为我们考虑到了这一点，那就是我们下面要讲到的 "
                    },
                    {
                      "text": "tuple",
                      "code": true
                    },
                    {
                      "text": "  （元组）类型。"
                    }
                  ]
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": "tuple 类型附着实战"
                    }
                  ],
                  "id": "Mn_OeURj",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "大家可能对 "
                    },
                    {
                      "text": "tuple",
                      "code": true
                    },
                    {
                      "text": " （元组）类型很陌生了，其实元是一种特殊的数组类型，它主要用于这样的场景：“一个数组的项数已知，其中每项的类型也已知”，这句话说起来可能比较绕，我们用上面讲数组的例子来讲元祖："
                    }
                  ],
                  "id": "tEgIUypM",
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "code-block",
                  "lang": "typescript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const arr = ['1', 2, '3'];"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们知道上面的数组第一项和第三项的类型为 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 类型，第二项的类型为 "
                    },
                    {
                      "text": "number",
                      "code": true
                    },
                    {
                      "text": " 类型，现在我们要给这个 "
                    },
                    {
                      "text": "arr",
                      "code": true
                    },
                    {
                      "text": " 附着一个类型，使得其静态化。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这个条件满足我们上面说的元组的适用场景，我们通过给 "
                    },
                    {
                      "text": "arr",
                      "code": true
                    },
                    {
                      "text": " 一个对应的元组类型，让我们可以保持上面的写法不变："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const arr: [string, number, string] = ['1', 2, '3'];"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，元组就是形如 "
                    },
                    {
                      "text": "[type1, type2, type3, ...., typen]",
                      "code": true
                    },
                    {
                      "text": " 这样数组长度已知，且类型已知的情况，其中 "
                    },
                    {
                      "text": "type1",
                      "code": true
                    },
                    {
                      "text": " 到 "
                    },
                    {
                      "text": "typen",
                      "code": true
                    },
                    {
                      "text": " 中所有的类型都可以不一样。"
                    }
                  ]
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": "小结"
                    }
                  ],
                  "id": "AE-5CX8J"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在这一小结中我们讲解了一下什么是非原始类型，然后说明了在 TS 中有四种非原始类型，其中有一种代表非原始类型 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " ，然后剩下的三种属于 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " 类型。"
                    }
                  ],
                  "id": "rbGSODFa"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们通过实践讲解了 "
                    },
                    {
                      "text": "array",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "tuple",
                      "code": true
                    },
                    {
                      "text": " 类型，对于 "
                    },
                    {
                      "text": "enum",
                      "code": true
                    },
                    {
                      "text": " 类型和 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " 类型本身，我们将留在之后的章节来讲，敬请期待✌️。"
                    }
                  ],
                  "id": "rbGSODFa"
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "特殊类型"
                    }
                  ],
                  "id": "g12DoJJ0"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "TS 中还有几个常用的特殊类型，它们是 "
                    },
                    {
                      "text": "any",
                      "code": true
                    },
                    {
                      "text": " 、"
                    },
                    {
                      "text": "unknown",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "never",
                      "code": true
                    },
                    {
                      "text": " ，其中 "
                    },
                    {
                      "text": "never",
                      "code": true
                    },
                    {
                      "text": " 类型一般会伴随着和函数的类型声明一起使用，所以我们将 "
                    },
                    {
                      "text": "never",
                      "code": true
                    },
                    {
                      "text": " 类型的时候会提到函数的类型如何进行声明。"
                    }
                  ],
                  "id": "vy-D-R6H"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接下来我们来讲一讲这三个类型的含义和应用。"
                    }
                  ],
                  "id": "vy-D-R6H"
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": "any 类型定义与实战"
                    }
                  ],
                  "id": "Ggm5OHfI"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "any",
                      "code": true
                    },
                    {
                      "text": " 的字面含义是 “任何”，主要用于在编码的时候不知道一个变量的类型，所以先给它加一个 "
                    },
                    {
                      "text": "any",
                      "code": true
                    },
                    {
                      "text": " 类型定义，表示它可以是任何类型，一般留待后续确认此变量类型之后再将 "
                    },
                    {
                      "text": "any",
                      "code": true
                    },
                    {
                      "text": " 改为具体的类型。"
                    }
                  ],
                  "id": "vy-D-R6H"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们来看一个例子，比如我们有下面一段 TS 变量定义语句："
                    }
                  ],
                  "id": "vy-D-R6H"
                },
                {
                  "type": "code-block",
                  "lang": "js",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "let demand: any;"
                        }
                      ],
                      "id": "vy-D-R6H"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "因为有时候产品给一个需求，要我们去开发一个新功能，给了设计稿，但是没交接清楚，对于设计稿有一些内容我们想提前做，但是因为不清楚具体的类型，比如这里的 "
                    },
                    {
                      "text": "demand",
                      "code": true
                    },
                    {
                      "text": " ，所以我们这里给 "
                    },
                    {
                      "text": "demand",
                      "code": true
                    },
                    {
                      "text": " 一个 "
                    },
                    {
                      "text": "any",
                      "code": true
                    },
                    {
                      "text": " 类型，然后继续做其他的内容，这样既不会出错，也不会影响其他的开发进度。"
                    }
                  ],
                  "id": "vy-D-R6H"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "等到产品把具体的上下文交代清楚了，诶！我们清楚了知道这个 "
                    },
                    {
                      "text": "demand",
                      "code": true
                    },
                    {
                      "text": " 的类型了，我们就可以回过头来给其附着一个严格的类型定义，比如我们知道它是 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 类型，那么我们再返回来对其修改如下："
                    }
                  ],
                  "id": "vy-D-R6H"
                },
                {
                  "type": "code-block",
                  "lang": "typescript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "let demand: string;"
                        }
                      ],
                      "id": "vy-D-R6H"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "就是这样，"
                    },
                    {
                      "text": "any",
                      "code": true
                    },
                    {
                      "text": " 的应用场景大多是这样的。但是玩 TS 的朋友要小心哦，不要一碰到不确定的就写个 "
                    },
                    {
                      "text": "any",
                      "code": true
                    },
                    {
                      "text": " 类型，然后写了之后还不改，那就把 TS 用成了 AnyScript 了，这就和 JS 一样了😉。所以你看呀，TS 的优秀之处在于，你完全可以在 TS 的环境中写 JS 还能享受 TS 带来的各种静态语言的优势，所以这么受欢迎也是可以理解滴。"
                    }
                  ],
                  "id": "vy-D-R6H"
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": "unknown 类型定义与实战"
                    }
                  ],
                  "id": "3h5TlpUy"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "unknown",
                      "code": true
                    },
                    {
                      "text": " 类型和 "
                    },
                    {
                      "text": "any",
                      "code": true
                    },
                    {
                      "text": " 都可以表示任何类型，应用场景也和上面类型，但是它更安全。那么具体安全在哪里了？我们通过一个例子来看一看："
                    }
                  ],
                  "id": "PAP_Od1A"
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "let demandOne: any;"
                        }
                      ],
                      "id": "PAP_Od1A"
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "let demandTwo: unknown;"
                        }
                      ],
                      "id": "PAP_Od1A"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们拿到了开发需求，但是不清楚具体类型又打算继续开发时，上面两种情况都可以使用，但是当我们具体使用这两个变量的时候，"
                    },
                    {
                      "text": "any",
                      "code": true
                    },
                    {
                      "text": " 类型的变量是可以进行任意进行赋值、实例化、函数执行等操作，但是 "
                    },
                    {
                      "text": "unknown",
                      "code": true
                    },
                    {
                      "text": " 只允许赋值，不允许实例化、函数执行等操作，我们来看个例子："
                    }
                  ],
                  "id": "PAP_Od1A"
                },
                {
                  "type": "code-block",
                  "lang": "ts",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "demandOne = 'Hello, Tuture'; // 可以的"
                        }
                      ],
                      "id": "PAP_Od1A"
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "demandTwo = 'Hello, Ant Design'; // 可以的"
                        }
                      ],
                      "id": "PAP_Od1A"
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ],
                      "id": "PAP_Od1A"
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "demandOne.foo.bar() // 可以的"
                        }
                      ],
                      "id": "PAP_Od1A"
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "demandTwo.foo.bar() // 报错"
                        }
                      ],
                      "id": "PAP_Od1A"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，"
                    },
                    {
                      "text": "unknown",
                      "code": true
                    },
                    {
                      "text": " 类型只允许赋值操作，不允许对象取值（Getter)   、函数执行等操作，所以它更安全。"
                    }
                  ],
                  "id": "PAP_Od1A"
                },
                {
                  "type": "heading-five",
                  "children": [
                    {
                      "text": "never / 函数类型定义与实战"
                    }
                  ],
                  "id": "QnNEfVKf"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "never"
                    },
                    {
                      "text": " 的字面意思是 “永不”，在 TS 中代表不存在的值类型，一般用于给函数进行类型声明，函数绝不会有返回值的时候使用，比如函数内抛出错误，我们首先看个例子将讲解一下如何给函数进行类型声明，然后接着我们讲  "
                    },
                    {
                      "code": true,
                      "text": "never"
                    },
                    {
                      "text": " 类型如何使用："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "typescript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "function responseError(message) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // ... 具体操作，接收信息，抛出错误"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "对于上面的函数，我们可以使用箭头函数的形式把它抽象成为形如 "
                    },
                    {
                      "code": true,
                      "text": "(args1, args2, ... , argsn) => returnValue"
                    },
                    {
                      "text": " ，我们主要关注点在于函数的输入和输出，所以我们在类型声明的时候把函数的输入参数的类型和输出结果的类型定义好就可以了。我们注意到上面我们定义的函数有一个参数： "
                    },
                    {
                      "code": true,
                      "text": "message"
                    },
                    {
                      "text": "  ，并且函数体内根据 "
                    },
                    {
                      "code": true,
                      "text": "message"
                    },
                    {
                      "text": " 抛出对应的错误，那么我们来给它进行类型声明如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "typescript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "function responseError(message: string): never {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // ... 具体操作，接收信息，抛出错误"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "动手实践"
                    }
                  ],
                  "id": "98dFe3UQ"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "基本了解了类型语言的数据结构之后，我们马上来写一点 React 代码来实践我们学到的知识。"
                    }
                  ],
                  "id": "ysT999T-"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们之前准备的代码中可以看到，有两个假数据数组 "
                    },
                    {
                      "text": "todoListData",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "userList",
                      "code": true
                    },
                    {
                      "text": " ，我们使用之前学到的知识来给这两个数组进行类型定义，打开 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " 对其中的内容作出对应的修改如下："
                    }
                  ],
                  "id": "ysT999T-"
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.tsx",
              "commit": "2726f1094dd6830a85bfe273da795628856b00dd",
              "hiddenLines": [
                [
                  0,
                  22
                ],
                [
                  44,
                  67
                ],
                [
                  72,
                  96
                ],
                [
                  99,
                  189
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面我们定义了两个 "
                    },
                    {
                      "text": "interface",
                      "code": true
                    },
                    {
                      "text": "  Todo 和 User，然后以数组类型的方式对 "
                    },
                    {
                      "text": "todoListData",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "userList",
                      "code": true
                    },
                    {
                      "text": " 进行注解，表示 "
                    },
                    {
                      "text": "todoListData",
                      "code": true
                    },
                    {
                      "text": " 是 "
                    },
                    {
                      "text": "Todo[]",
                      "code": true
                    },
                    {
                      "text": " 类型，"
                    },
                    {
                      "text": "userList",
                      "code": true
                    },
                    {
                      "text": " 是 "
                    },
                    {
                      "text": "User",
                      "code": true
                    },
                    {
                      "text": " 类型。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里的 "
                    },
                    {
                      "text": "interface",
                      "code": true
                    },
                    {
                      "text": " 我们还没用提到，我们将马上在后面讲到，可以理解它类似 JS 中的对象，用来组织一组类型，就比如我们这里  "
                    },
                    {
                      "text": "todoList",
                      "code": true
                    },
                    {
                      "text": " 中单个元素实际上是包含四个属性的对象，其中前三个属性为 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 原始类型，最后一个属性为 "
                    },
                    {
                      "text": "boolean",
                      "code": true
                    },
                    {
                      "text": " 类型，所以我们为了给 单个对象元素进行类型注解，我们使用了 "
                    },
                    {
                      "text": "interface",
                      "code": true
                    },
                    {
                      "text": " 。"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
      "id": "n-5jKURDa",
      "articleId": "C_ao1Yvqy",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
          "id": "ZOeJySOHG",
          "fixed": true,
          "children": [
            {
              "text": "枚举和接口"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在上一节中我们提到了 "
                },
                {
                  "text": "interface",
                  "code": true
                },
                {
                  "text": " ，当时没有细讲，这一节我们就先来细细说一下 "
                },
                {
                  "text": "interface",
                  "code": true
                },
                {
                  "text": " 是什么？"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "Interface"
                }
              ],
              "id": "dvc3N2G_4"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "它相当于类型中的 JS 对象，用于对函数、类等进行结构类型检查，所谓的结构类型检查，就是两个类型的结构一样，那么它们的类型就是兼容的，这在计算机科学的世界里也被成为 “鸭子类型”。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "什么鸭子类型？",
                      "bold": true
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们马上来看一个例子了解一个 "
                },
                {
                  "text": "Interface",
                  "code": true
                },
                {
                  "text": " 是怎么样的，比如我们之前对象 "
                },
                {
                  "text": "Todo",
                  "code": true
                },
                {
                  "text": " ，一个 Todo 对象如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "js",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const todo = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  content: '图雀社区，汇聚精彩的免费技术教程';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  user: 'mRcfps',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  time: '图雀社区：汇聚精彩的免费实战教程',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  isCompleted: false,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "现在我们要这个 todo 做一个类型注解，根据之前提到的 “鸭子类型” 的方式，我们可以定义一个 Interface 来为它做注解："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Todo {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  content: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  user: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  time: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  isCompleted: boolean;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const todo: Todo = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": " // ..."
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到我们的接口 "
                },
                {
                  "text": "Todo",
                  "code": true
                },
                {
                  "text": " 内容有四个字段，并且标注了这四个字段的类型，比如 "
                },
                {
                  "text": "content",
                  "code": true
                },
                {
                  "text": " 为 "
                },
                {
                  "text": "string",
                  "code": true
                },
                {
                  "text": " ，这个接口的样子和 "
                },
                {
                  "text": "todo",
                  "code": true
                },
                {
                  "text": " 对象是一样的，所以用 Interface  "
                },
                {
                  "text": "Todo",
                  "code": true
                },
                {
                  "text": "  来注解 "
                },
                {
                  "text": "todo",
                  "code": true
                },
                {
                  "text": " 是可行的，用 VSCode 的同学，应该可以看到我们这样写之后，编辑器里面没有抛出异常。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "可选属性"
                }
              ],
              "id": "fmu8CX393"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面我们讲到 Interface 是用来注解 对象，函数等，那么我们就有一个场景，一个对象里面的某些参数我们可能没有，比如一个待办事项 Todo，有时候没有设置 "
                },
                {
                  "text": "time",
                  "code": true
                },
                {
                  "text": " 时间属性，那么修饰这样一个对象我们该怎么办了？幸好 TS 给我们提供了可选属性这样一个方便的属性，使得我们可以方便解决上面的问题，我们来看一下可选属性该怎么写，假如我们上面的那个例子，"
                },
                {
                  "text": "time",
                  "code": true
                },
                {
                  "text": " 是可选的，那么我们可以写出如下这样："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Todo {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  content: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  user: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  time?: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  isCompleted: boolean;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们看到，只需要在属性类型修饰冒号左边加一个问号就可以了，这个时候我们就告诉 TS 编译器这个 "
                },
                {
                  "text": "time",
                  "code": true
                },
                {
                  "text": " 属性是可选的一个类型，所以我们用上面的 Interface Todo 来注解一下没有 "
                },
                {
                  "text": "time",
                  "code": true
                },
                {
                  "text": " 属性的 "
                },
                {
                  "text": "todo",
                  "code": true
                },
                {
                  "text": " 对象如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const todo: Todo = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  content: '予力内容创作，加速技术传播',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  user: 'pftom',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  isCompleted: false,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，使用 VSCode 来跟着教程敲的同学应该发现上面的内容没有错误，类型检查通过了。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "只读属性"
                }
              ],
              "id": "lnwatcHTL"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "TS 的 Interface 还有一些额外的属性比如只读属性（readonly），表示用相关带有只读属性的接口对某个 JS 元素做类型注解的时候，这个 JS 元素相关的属性被注解为只读属性时，我们之后不可以修改这个属性了，我们来看一个例子："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Todo {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  content: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  readonly user: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  time?: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  isCompleted: boolean;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到只读属性的添加就是在属性之前加上 "
                },
                {
                  "text": "readonly",
                  "code": true
                },
                {
                  "text": " 关键字，就可以将 Interface 中的属性标志为已读的，我们来试验一下这个只读效果："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const todo: Todo = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  content: '予力内容创作，加速技术传播',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  user: 'pftom',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  isCompleted: false,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "todo.user = 'mRcfps'"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当我们进行上面的修改操作之后，编辑器内会报错："
                }
              ]
            },
            {
              "type": "image",
              "url": "https://static.tuture.co/c/cea18bc864f7a9b94223dcc718646b02/image-ec0575e36632e4e2.png",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "多余属性检查"
                }
              ],
              "id": "f3ectQc6c"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我在在 JS 中经常会遇到一个对象，一开始我们知道它有是哪个属性，但是它的属性却可以动态增加，比如我们的 "
                },
                {
                  "text": "todo",
                  "code": true
                },
                {
                  "text": " 可能还存在 "
                },
                {
                  "text": "priority",
                  "code": true
                },
                {
                  "text": " 优先级这样一个属性，那么我们如何定义一个可以注解动态增加属性对象的 Interface 了?"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "所幸 TS 提供一个多余属性检查的写法，使得上面的问题我们也可以解决，我们来看一下一个多余属性教程该怎么定义："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Todo {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  isCompleted: boolean;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  [propName: string]: any;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "使用类似上面 JS 中的动态属性赋值的方式我们就可为 "
                },
                {
                  "text": "Todo",
                  "code": true
                },
                {
                  "text": " 接口加上多余属性检查，这里我们将其注解为一定拥有  "
                },
                {
                  "text": "isCompleted",
                  "code": true
                },
                {
                  "text": " 属性，其他的属性可以动态添加，因为动态添加的属性的值类型我们不清楚，所以我们用 "
                },
                {
                  "text": "any",
                  "code": true
                },
                {
                  "text": " 来表示值类型，它可以是任意类型。我们马上来试验一下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const todo: Todo = {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  content: '予力内容创作，加速技术传播',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  isCompleted: false,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "todo.user = 'pftom';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "todo.time = '2020-04-04';"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，上面我们我们的 todo 在定义的时候只有两个属性，后面我们额外添加了两个属性，发现编辑器里面也不会报错，这就是多余属性检查的魅力。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "Enum"
                }
              ],
              "id": "PBHoNYgZi"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "枚举是 TS 中独有的概念，在 JS 中没有，主要用于帮助定义一系列命名常量，常用于给一类变量做类型注解，它们的值是一组值里面的某一个，比如我们应用中参与创建待办事项的用户只有五个人，那么在创建待办事项时，此事项的所属用户是五人中的某一人。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们马上来看一个例子，我们的将这五个用户放到枚举里面："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "enum UserId {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  tuture,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  mRcfps,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  crxk,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  pftom,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  holy"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "进而我们可以改进一下我们在上节  Interface 里面的 "
                },
                {
                  "text": "Todo",
                  "code": true
                },
                {
                  "text": " 接口，给它的 "
                },
                {
                  "text": "user",
                  "code": true
                },
                {
                  "text": " 字段一个更精确的类型注解："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Todo {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  content: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  user: UserId;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  time: string;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  isCompleted: boolean;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "通过上面的例子我们可以看到，"
                },
                {
                  "text": "todo",
                  "code": true
                },
                {
                  "text": "  里面的 "
                },
                {
                  "text": "user",
                  "code": true
                },
                {
                  "text": " 字段应该是五人之一，它有可能是 "
                },
                {
                  "text": "tuture",
                  "code": true
                },
                {
                  "text": " ，也有可能是 "
                },
                {
                  "text": "mRcfps",
                  "code": true
                },
                {
                  "text": " ，我们不知道，所以我们写了一个枚举 "
                },
                {
                  "text": "UserId",
                  "code": true
                },
                {
                  "text": " ，并用它来注解 "
                },
                {
                  "text": "Todo",
                  "code": true
                },
                {
                  "text": " 的 "
                },
                {
                  "text": "user",
                  "code": true
                },
                {
                  "text": " 字段。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "数字枚举"
                }
              ],
              "id": "VhbKUkpHH"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面我们的 UserId 中几个枚举值其实都对应着相应的数字，比如 "
                },
                {
                  "text": "UserId.tuture",
                  "code": true
                },
                {
                  "text": " 它的值是数字 "
                },
                {
                  "text": "0",
                  "code": true
                },
                {
                  "text": " ，"
                },
                {
                  "text": "UserId.mRcfps",
                  "code": true
                },
                {
                  "text": " 它的值是数字 "
                },
                {
                  "text": "1",
                  "code": true
                },
                {
                  "text": " ，以此类推，后面的几个枚举值分别是数字 "
                },
                {
                  "text": "2",
                  "code": true
                },
                {
                  "text": " ，"
                },
                {
                  "text": "3",
                  "code": true
                },
                {
                  "text": " ，"
                },
                {
                  "text": "4",
                  "code": true
                },
                {
                  "text": " 。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当然我们也可以手动给其中某个枚举值赋值一个数字，这样这个枚举值后面的值会依次在这个赋值的数字上递增，我们来看个例子："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "enum UserId {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  tuture,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  mRcfps = 6,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  crxk,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  pftom,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  holy,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面我们的每个枚举值对应的数字依次是："
                },
                {
                  "text": "0",
                  "code": true
                },
                {
                  "text": " ，"
                },
                {
                  "text": "6",
                  "code": true
                },
                {
                  "text": " ，"
                },
                {
                  "text": "7",
                  "code": true
                },
                {
                  "text": " ，"
                },
                {
                  "text": "8",
                  "code": true
                },
                {
                  "text": " ，"
                },
                {
                  "text": "9",
                  "code": true
                },
                {
                  "text": " "
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "字符串枚举"
                }
              ],
              "id": "JljAuhslu"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "枚举的值除了是数字还可以是一系列字符串，比如："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "enum UserId {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  tuture = '66666666',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  mRcfps = '23410977',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  crxk = '25455350',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  pftom = '23410976',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  holy = '58352313',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，我们给每个枚举值赋值了对于的字符串。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "异构枚举"
                }
              ],
              "id": "WG97kaIwj"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当然在一个枚举里面既可以有字符串值也可以有数字："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "enum UserId {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  tuture = '66666666',"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  mRcfps = 6,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "动手实践"
                }
              ],
              "id": "CmjDGmWKD"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "了解了 "
                },
                {
                  "text": "Interface",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "Enum",
                  "code": true
                },
                {
                  "text": " 之后，我们马上运用在我们的项目中来完善我们的待办事项应用。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/TodoInput.tsx",
          "display": true,
          "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "随着内容越写越多，我们的 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " 越来越复杂，所以我们打算把 "
                    },
                    {
                      "text": "TodoInput",
                      "code": true
                    },
                    {
                      "text": " 组件拆到单独的页面，在 "
                    },
                    {
                      "text": "src",
                      "code": true
                    },
                    {
                      "text": " 目录下新建 "
                    },
                    {
                      "text": "TodoInput.tsx",
                      "code": true
                    },
                    {
                      "text": " ，并在里面编写如下的内容："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/TodoInput.tsx",
              "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面的内容，主要有如下几个部分的修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们定义了新的 "
                        },
                        {
                          "text": "Interface",
                          "code": true
                        },
                        {
                          "text": " ："
                        },
                        {
                          "text": "TodoInputProps",
                          "code": true
                        },
                        {
                          "text": " ，它主要用来注解 "
                        },
                        {
                          "text": "TodoInput",
                          "code": true
                        },
                        {
                          "text": " 这个函数式组件的 "
                        },
                        {
                          "text": "props",
                          "code": true
                        },
                        {
                          "text": " 类型，可看到这个接口主要有两个字段，一个是 "
                        },
                        {
                          "text": "value",
                          "code": true
                        },
                        {
                          "text": " ，它是 "
                        },
                        {
                          "text": "TodoValue",
                          "code": true
                        },
                        {
                          "text": " 类型，还有一个 "
                        },
                        {
                          "text": "onChange",
                          "code": true
                        },
                        {
                          "text": " ，它是一个函数类型，表示父组件将会传递一个 "
                        },
                        {
                          "text": "onChange",
                          "code": true
                        },
                        {
                          "text": " 函数，我们将在之后讲解 TS 怎么注解函数，。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们新增了一个枚举 "
                        },
                        {
                          "text": "UserId",
                          "code": true
                        },
                        {
                          "text": " ，用来概括我们应用的五个用户的 ID，并且人为的为这五个枚举常量赋了对应的值。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们改进了定义了一个新 "
                        },
                        {
                          "text": "TodoValue",
                          "code": true
                        },
                        {
                          "text": " 接口，它有三个字段，主要用于标志 "
                        },
                        {
                          "text": "TodoInputProps",
                          "code": true
                        },
                        {
                          "text": " 中上层组件中可能传递下来的值，所以三个字段都是可选的"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们定义了三个响应 "
                        },
                        {
                          "text": "Input",
                          "code": true
                        },
                        {
                          "text": " 、"
                        },
                        {
                          "text": "Select",
                          "code": true
                        },
                        {
                          "text": " 、"
                        },
                        {
                          "text": "DatePicker",
                          "code": true
                        },
                        {
                          "text": " 的函数，"
                        },
                        {
                          "text": "onContentChange",
                          "code": true
                        },
                        {
                          "text": " ，"
                        },
                        {
                          "text": "onUserChange",
                          "code": true
                        },
                        {
                          "text": " ，"
                        },
                        {
                          "text": "onDateOk",
                          "code": true
                        },
                        {
                          "text": " ，当上层组件没有传递对应的属性时，使用 "
                        },
                        {
                          "text": "setXXX",
                          "code": true
                        },
                        {
                          "text": " 来更新 React 状态，否则触发 "
                        },
                        {
                          "text": "triggerChange",
                          "code": true
                        },
                        {
                          "text": " ，调用父组件传递下来的 "
                        },
                        {
                          "text": "onChange",
                          "code": true
                        },
                        {
                          "text": " 方法来更新对应的状态"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "上面我们从 "
                        },
                        {
                          "text": "./utils/data",
                          "code": true
                        },
                        {
                          "text": " 导入了 "
                        },
                        {
                          "text": "userList",
                          "code": true
                        },
                        {
                          "text": " ，以及导入了 "
                        },
                        {
                          "text": "Moment",
                          "code": true
                        },
                        {
                          "text": " 用来注解 "
                        },
                        {
                          "text": "moment",
                          "code": true
                        },
                        {
                          "text": " 类型的 date ，我们将在接下来的来马上来创建对于的 "
                        },
                        {
                          "text": "./utils/data",
                          "code": true
                        },
                        {
                          "text": " 文件以及安装对于的 "
                        },
                        {
                          "text": "moment",
                          "code": true
                        },
                        {
                          "text": " 。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "package.json",
          "display": true,
          "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在 "
                    },
                    {
                      "text": "src/TodoInput.tsx",
                      "code": true
                    },
                    {
                      "text": " 中我们导入了 "
                    },
                    {
                      "text": "Moment",
                      "code": true
                    },
                    {
                      "text": " 用来注解 "
                    },
                    {
                      "text": "onDateOk",
                      "code": true
                    },
                    {
                      "text": " 的函数参数 "
                    },
                    {
                      "text": "date",
                      "code": true
                    },
                    {
                      "text": " ，接下来我们来安装它："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "npm install moment"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
              "hiddenLines": [
                [
                  0,
                  14
                ],
                [
                  22,
                  46
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/utils/data.ts",
          "display": true,
          "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们来创建对应的 "
                    },
                    {
                      "text": "src/utils/data.ts",
                      "code": true
                    },
                    {
                      "text": " 文件，把之前在 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " 里面的假数据统一放在这个文件里面，然后导出："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/utils/data.ts",
              "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.tsx",
          "display": true,
          "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "拆分了 "
                    },
                    {
                      "text": "TodoInput",
                      "code": true
                    },
                    {
                      "text": " ，并把假数据移动到单独的文件之后，我们需要修改 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " 对应的部分如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.tsx",
              "commit": "c19a68c181fd97f289ec5049355bcdfc48b30570",
              "hiddenLines": [
                [
                  105,
                  105
                ],
                [
                  129,
                  155
                ],
                [
                  166,
                  172
                ],
                [
                  184,
                  200
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的内容主要做出了如下的修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们删除了对应的假数据 "
                        },
                        {
                          "text": "userList",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "todoListData",
                          "code": true
                        },
                        {
                          "text": " 及其 Interface 定义 "
                        },
                        {
                          "text": "Todo",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "User",
                          "code": true
                        },
                        {
                          "text": " ，转而从我们创建的 "
                        },
                        {
                          "text": "src/utils/data.ts",
                          "code": true
                        },
                        {
                          "text": " 里面导入 "
                        },
                        {
                          "text": "todoListData",
                          "code": true
                        },
                        {
                          "text": " "
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们删除了 "
                        },
                        {
                          "text": "TodoInput",
                          "code": true
                        },
                        {
                          "text": " 组件，转而导入我们之前创建的  "
                        },
                        {
                          "text": "TodoInput",
                          "code": true
                        },
                        {
                          "text": " 组件"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们给 "
                        },
                        {
                          "text": "Form",
                          "code": true
                        },
                        {
                          "text": " 表单部分加上了一个提交按钮，以及扩展了 "
                        },
                        {
                          "text": "onFinish",
                          "code": true
                        },
                        {
                          "text": " 函数"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们删除了一些不再需要的导包"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "8mWHiRYKo"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "大功告成，这一节中我们学习了接口（Interface）和枚举（Enum），接口主要是对对象等多属性元素进行类型注解，而枚举是 TS 中独有的一个概念，在 JS 中没有，主要用于帮助定义一系列命名常量，常用于给一类变量做类型注解，它们的值是一组值里面的某一个，最后我们通过改进现有的 Todo 应用来实践了学到的这两个概念。"
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "本文所涉及的源代码都放在了 ",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 2
                    },
                    {
                      "text": "Github",
                      "link": true,
                      "url": "https://github.com/tuture-dev/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 3
                    },
                    {
                      "text": "  或者 ",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 4
                    },
                    {
                      "text": "Gitee",
                      "link": true,
                      "url": "https://gitee.com/tuture/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 5
                    },
                    {
                      "text": " 上，如果您觉得我们写得还不错，希望您能给",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 6
                    },
                    {
                      "text": "❤️这篇文章点赞+",
                      "bold": true,
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 7
                    },
                    {
                      "text": "Github",
                      "bold": true,
                      "link": true,
                      "url": "https://github.com/tuture-dev/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 8
                    },
                    {
                      "text": " 或 ",
                      "bold": true,
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 9
                    },
                    {
                      "text": "Gitee",
                      "bold": true,
                      "link": true,
                      "url": "https://gitee.com/tuture/typescript-tea",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 10
                    },
                    {
                      "text": " 仓库加星❤",
                      "bold": true,
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 11
                    },
                    {
                      "text": "️哦~",
                      "level": 0,
                      "parent": "numbered-list",
                      "number": 12
                    }
                  ]
                }
              ]
            },
            {
              "type": "image",
              "url": "https://user-gold-cdn.xitu.io/2019/12/19/16f1ddb37a4d47a8?w=900&h=500&f=png&s=138401",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "f24dc3125e7c6f41c1638a84b4e3dbfaf5d9a892",
      "id": "q6hjpT27I",
      "articleId": "H2r1tpF_v",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "f24dc3125e7c6f41c1638a84b4e3dbfaf5d9a892",
          "id": "n7grMd_y0",
          "fixed": true,
          "children": [
            {
              "text": "函数"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们在之前 "
                },
                {
                  "text": "TodoInputProps",
                  "code": true
                },
                {
                  "text": " 中对 "
                },
                {
                  "text": "onChange",
                  "code": true
                },
                {
                  "text": " 函数做了类型注解，当时我们没有详细讲解，在这一节中我们就来详细讲解一下 TS 中的函数。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "注解函数"
                }
              ],
              "id": "wH7dzRmcc"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "比如我们有如下的函数："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function add(x, y) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return x + y;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "那么我们该如何注解这个函数了？实际上函数主要的部分就是输入和输出，所以我们在注解函数的时候只需要注解函数的参数和返回值就可以了，因为上述的函数体内是是执行 "
                },
                {
                  "text": "x+y",
                  "code": true
                },
                {
                  "text": " 操作，以我们的 "
                },
                {
                  "text": "x",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "y",
                  "code": true
                },
                {
                  "text": " 应该都是 "
                },
                {
                  "text": "number",
                  "code": true
                },
                {
                  "text": " 数字类型，返回值也是 "
                },
                {
                  "text": "number",
                  "code": true
                },
                {
                  "text": " 数字类型，所以我们对上面的函数进行类型注解如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function add(x: number, y: number): number {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return x + y;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到我们用冒号注解形式给 "
                },
                {
                  "text": "x",
                  "code": true
                },
                {
                  "text": " 和  "
                },
                {
                  "text": "y",
                  "code": true
                },
                {
                  "text": " 注解了 "
                },
                {
                  "text": "number",
                  "code": true
                },
                {
                  "text": " 类型，而对于返回值，我们直接以 "
                },
                {
                  "text": "add(): number",
                  "code": true
                },
                {
                  "text": " 的形式注解返回值。有时候返回值也可以不写，TS 可以根据参数类型和函数体计算返回值类型，也就是俗称的自动推断类型机制。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "函数类型"
                }
              ],
              "id": "MpicPuzuf"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "除了注解函数，有时候我们还涉及到将函数赋值给一个变量，比如如下的例子："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const add = function (x, y) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return x + y;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这个时候我们一般来注解 "
                },
                {
                  "text": "add",
                  "code": true
                },
                {
                  "text": " 时候，就需要使用函数类型来注解它，一个函数类型是形如："
                },
                {
                  "text": "(args1: type1, args2: type2, ..., args2: typen) => returnType",
                  "code": true
                },
                {
                  "text": " 的类型，所以对于上述的例子我们可以对其注解如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const add: (x: number, y: number): number =  function(x, y) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return x + y;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可能有同学有疑问了，这里我们给 "
                },
                {
                  "text": "add",
                  "code": true
                },
                {
                  "text": " 变量注解了函数类型，但是我们没有给后面的那个函数进行一个注解啊？其实 TS 会进行类型的自动推导，根据函数类型的结构对比后面的函数，会自动推断出后面函数的 "
                },
                {
                  "text": "x",
                  "code": true
                },
                {
                  "text": " ，"
                },
                {
                  "text": "y",
                  "code": true
                },
                {
                  "text": " 和返回值都为 "
                },
                {
                  "text": "number",
                  "code": true
                },
                {
                  "text": " 。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "可选参数"
                }
              ],
              "id": "BF8Oxp7CU"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "就像我们之前接口（Interface）中有可选属性一样，我们的函数中也存在可选参数，因为使用 TS 最大的好处之一就是尽可能的明确函数、接口等类型定义，方便其他团队成员很清晰了解代码的接口，大大提高团队协作的效率，所以如果一个函数可能存在一些参数，但是我们并不是每次都需要传递这些参数，那么它们就属于可选参数的范围。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们来看一下可选参数的例子，比如我们想写一个构造一个人姓名的函数，包含 "
                },
                {
                  "text": "firstName",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "lastName",
                  "code": true
                },
                {
                  "text": " ，但是有时候我们不知道 "
                },
                {
                  "text": "lastName",
                  "code": true
                },
                {
                  "text": " ，那么这样一个函数该怎么写了？："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function buildName(firstName: string, lastName?: string) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // ..."
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到上面我们构建一个人姓名的函数，必须得传递 "
                },
                {
                  "text": "firstName",
                  "code": true
                },
                {
                  "text": " 属性，但是因为 "
                },
                {
                  "text": "lastName",
                  "code": true
                },
                {
                  "text": " 可能有时候并不能获取到，所以把它设置为可选参数，所以以下几种函数调用方式都是可以的："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "buildName('Tom', 'Huang');"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "buildName('mRcfps');"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "重载"
                }
              ],
              "id": "D2ZcEAioZ"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "重载（Overloads）是 TS 独有的概念，在 JS 中没有，它主要为函数多返回类型服务，具体来说就是一个函数可能会在内部执行一个条件语句，根据不同的条件返回不同的值，这些值可能是不同类型的，那么这个时候我们该怎么来给返回值注解类型了？"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "答案就是使用重载，通过定义一系列同样函数名，不同参数列表和返回值的函数来注解多类型返回值函数，我们来看一个多类型返回的函数："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let suits = [\"hearts\", \"spades\", \"clubs\", \"diamonds\"];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function pickCard(x): any {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // 如果 x 是 `object` 类型，那么我们返回 pickCard 从 myDeck 里面取出 pickCard1 数据"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  if (typeof x == \"object\") {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    let pickedCard = Math.floor(Math.random() * x.length);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return pickedCard;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // 如果 x 是 `number` 类型，那么直接返回一个可以取数据的 pickCard2"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  else if (typeof x == \"number\") {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    let pickedSuit = Math.floor(x / 13);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return { suit: suits[pickedSuit], card: x % 13 };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let myDeck = ["
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  { suit: \"diamonds\", card: 2 },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  { suit: \"spades\", card: 10 },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  { suit: \"hearts\", card: 4 }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let pickedCard1 = myDeck[pickCard(myDeck)];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "alert(\"card: \" + pickedCard1.card + \" of \" + pickedCard1.suit);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let pickedCard2 = pickCard(15);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "alert(\"card: \" + pickedCard2.card + \" of \" + pickedCard2.suit);"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "针对上面的这个例子，我们这个 "
                },
                {
                  "text": "pickCard",
                  "code": true
                },
                {
                  "text": " 函数根据 "
                },
                {
                  "text": "x",
                  "code": true
                },
                {
                  "text": " 的类型会有不同的返回类型，有的同学可能会有疑问了，之前我们不是说过，TS 能够根据参数类型和函数体自动推断返回值类型嘛？是的，之前那个例子参数类型只有一种选项，所以可以自动推断出返回值类型，但是这里的情况是：“参数类型可能有多种选项，对应不同选项的参数类型，会有不同的返回值类型，并且我们对参数类型还未知”。针对这种情况，我们直接解耦这个对应关系，使用重载就可以很好的表达出来："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let suits = [\"hearts\", \"spades\", \"clubs\", \"diamonds\"];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function pickCard(x: { suit: string; card: number }[]): number;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function pickCard(x: number): { suit: string; card: number };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function pickCard(x): any {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // 如果 x 是 `object` 类型，那么我们返回 pickCard 从 myDeck 里面取出 pickCard1 数据"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  if (typeof x == \"object\") {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    let pickedCard = Math.floor(Math.random() * x.length);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return pickedCard;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // 如果 x 是 `number` 类型，那么直接返回一个可以取数据的 pickCard2"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  else if (typeof x == \"number\") {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    let pickedSuit = Math.floor(x / 13);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return { suit: suits[pickedSuit], card: x % 13 };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let myDeck = ["
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  { suit: \"diamonds\", card: 2 },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  { suit: \"spades\", card: 10 },"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  { suit: \"hearts\", card: 4 }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let pickedCard1 = myDeck[pickCard(myDeck)];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "alert(\"card: \" + pickedCard1.card + \" of \" + pickedCard1.suit);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let pickedCard2 = pickCard(15);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "alert(\"card: \" + pickedCard2.card + \" of \" + pickedCard2.suit);"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们可以看到这段代码比上面唯一多了的就是两端 "
                },
                {
                  "text": "function pickCard(x: type1): type2",
                  "code": true
                },
                {
                  "text": " 语句，所以重载实际上就是函数名一样，参数列表和返回值不一样，我们来解析一下上面多出的两个重载："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "第一个重载，我们给参数 "
                    },
                    {
                      "text": "x",
                      "code": true
                    },
                    {
                      "text": " 赋值了一个数组类型，数组的项是一个对象，对象包含两个属性 "
                    },
                    {
                      "text": "suit",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "card",
                      "code": true
                    },
                    {
                      "text": " ，它们的类型分别为 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "number",
                      "code": true
                    },
                    {
                      "text": " ；接着返回值类型为 "
                    },
                    {
                      "text": "number",
                      "code": true
                    },
                    {
                      "text": " 类型，这个对应 "
                    },
                    {
                      "text": "x",
                      "code": true
                    },
                    {
                      "text": " 的类型为 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " 时，返回类型为 "
                    },
                    {
                      "text": "number",
                      "code": true
                    },
                    {
                      "text": " 这种情况。"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "第二个重载，我们给参数 "
                    },
                    {
                      "text": "x",
                      "code": true
                    },
                    {
                      "text": " 赋值了一个 "
                    },
                    {
                      "text": "number",
                      "code": true
                    },
                    {
                      "text": " 类型，然后返回值类型是一个对象，它有两个属性 "
                    },
                    {
                      "text": "suit",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "card",
                      "code": true
                    },
                    {
                      "text": " ，对应的类型为 "
                    },
                    {
                      "text": "string",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "number",
                      "code": true
                    },
                    {
                      "text": " ；这个对应 "
                    },
                    {
                      "text": "x",
                      "code": true
                    },
                    {
                      "text": " 的类型为 "
                    },
                    {
                      "text": "number",
                      "code": true
                    },
                    {
                      "text": " 返回值类型为 "
                    },
                    {
                      "text": "object",
                      "code": true
                    },
                    {
                      "text": " 类型这种情况。"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            }
          ]
        },
        {
          "file": "src/utils/data.ts",
          "display": true,
          "commit": "f24dc3125e7c6f41c1638a84b4e3dbfaf5d9a892",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "动手实践"
                    }
                  ],
                  "id": "ODdoe_ztU"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "学习了 TS 的函数之后，我们马上来运用在我们的 待办事项 应用里面，首先我们打开 "
                    },
                    {
                      "text": "src/utils/data.ts",
                      "code": true
                    },
                    {
                      "text": " 对其中的数据做一点修改："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/utils/data.ts",
              "commit": "f24dc3125e7c6f41c1638a84b4e3dbfaf5d9a892",
              "hiddenLines": [
                [
                  71,
                  85
                ],
                [
                  92,
                  96
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面我们主要做出了如下几处修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "将 "
                        },
                        {
                          "text": "todoListData",
                          "code": true
                        },
                        {
                          "text": " 的每个元素的 "
                        },
                        {
                          "text": "user",
                          "code": true
                        },
                        {
                          "text": " 字段改为对应 "
                        },
                        {
                          "text": "userList",
                          "code": true
                        },
                        {
                          "text": " 元素的 "
                        },
                        {
                          "text": "id",
                          "code": true
                        },
                        {
                          "text": " ，方便基于 "
                        },
                        {
                          "text": "user",
                          "code": true
                        },
                        {
                          "text": " 的 "
                        },
                        {
                          "text": "id",
                          "code": true
                        },
                        {
                          "text": " 进行用户信息的查找。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们给 "
                        },
                        {
                          "text": "todoListData",
                          "code": true
                        },
                        {
                          "text": " 每个元素添加了 "
                        },
                        {
                          "text": "id",
                          "code": true
                        },
                        {
                          "text": " 方便标志，然后把 "
                        },
                        {
                          "text": "time",
                          "code": true
                        },
                        {
                          "text": " 属性替换成了 "
                        },
                        {
                          "text": "date",
                          "code": true
                        },
                        {
                          "text": " 属性。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们定义了一个 "
                        },
                        {
                          "text": "getUserById",
                          "code": true
                        },
                        {
                          "text": " 函数，用于每个 "
                        },
                        {
                          "text": "todo",
                          "code": true
                        },
                        {
                          "text": " 中根据 "
                        },
                        {
                          "text": "user",
                          "code": true
                        },
                        {
                          "text": " 字段来获取对应的用户详情，包括名字和头像等，这里我们有些同学可能有疑问了，我们给参数做了类型注解，为啥不需要注解返回值了？其实这也是 TS 自动类型推断的一个应用场景，TS 编译器会根据参数的类型然后自动计算返回值类型，所以我们就不需要明确的指定返回值啦。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们导出了 "
                        },
                        {
                          "text": "Todo",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "User",
                          "code": true
                        },
                        {
                          "text": " 接口。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/TodoList.tsx",
          "display": true,
          "commit": "f24dc3125e7c6f41c1638a84b4e3dbfaf5d9a892",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们类似单独创建 "
                    },
                    {
                      "text": "src/TodoInput.tsx",
                      "code": true
                    },
                    {
                      "text": " 组件给 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " 减负一样，尝试创建 "
                    },
                    {
                      "text": "src/TodoList.tsx",
                      "code": true
                    },
                    {
                      "text": " 组件，然后把对应 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " 的对应逻辑移动到这个组件里："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/TodoList.tsx",
              "commit": "f24dc3125e7c6f41c1638a84b4e3dbfaf5d9a892",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面我们主要做了如下改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们首先导入了 "
                        },
                        {
                          "text": "Todo",
                          "code": true
                        },
                        {
                          "text": " 接口，给 TodoList 组件增加了 "
                        },
                        {
                          "text": "TodoListProps",
                          "code": true
                        },
                        {
                          "text": " 接口用于给这个组件的 "
                        },
                        {
                          "text": "props",
                          "code": true
                        },
                        {
                          "text": " 做类型注解。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们导入了和 "
                        },
                        {
                          "text": "getUserById",
                          "code": true
                        },
                        {
                          "text": " ，用于在 "
                        },
                        {
                          "text": "renderItem",
                          "code": true
                        },
                        {
                          "text": " 里面根据 "
                        },
                        {
                          "text": "item.user",
                          "code": true
                        },
                        {
                          "text": " 获取用户详情信息，然后展示头像和姓名。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们将 "
                        },
                        {
                          "text": "item.time",
                          "code": true
                        },
                        {
                          "text": " 更新为 "
                        },
                        {
                          "text": "item.date",
                          "code": true
                        },
                        {
                          "text": " "
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们根据待办事项是否已经完成设置了 "
                        },
                        {
                          "text": "line-through",
                          "code": true
                        },
                        {
                          "text": " 的 "
                        },
                        {
                          "text": "textDecoration",
                          "code": true
                        },
                        {
                          "text": " 属性，来标志已经完成的事项。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.tsx",
          "display": true,
          "commit": "f24dc3125e7c6f41c1638a84b4e3dbfaf5d9a892",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后我们来根据上面的改进来修改对应的 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " ："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.tsx",
              "commit": "f24dc3125e7c6f41c1638a84b4e3dbfaf5d9a892",
              "hiddenLines": [
                [
                  5,
                  8
                ],
                [
                  82,
                  96
                ],
                [
                  113,
                  117
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面的内容作出了如下的修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们删除了 "
                        },
                        {
                          "text": "TodoList",
                          "code": true
                        },
                        {
                          "text": " 部分代码，转而导入了 "
                        },
                        {
                          "text": "TodoList",
                          "code": true
                        },
                        {
                          "text": " 组件"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们使用 "
                        },
                        {
                          "text": "useState",
                          "code": true
                        },
                        {
                          "text": " Hooks 接收 "
                        },
                        {
                          "text": "todoListData",
                          "code": true
                        },
                        {
                          "text": " 作为默认数据，然后通过 "
                        },
                        {
                          "text": "isCompleted",
                          "code": true
                        },
                        {
                          "text": " 过滤，生成"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "rxzjoiDXC"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们来总结和回顾一下这一小节学到的知识："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "首先我们讲解了 TS 中的函数，主要讲解了如何注解函数"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "然后引出了函数赋值给变量时如何进行变量的函数类型注解，并因此讲解了 TS 具有自动类型推断的能力"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "接着，我们对标接口（Interface）讲解了函数也存在可选参数"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "最后我们讲解了 TS 中独有的重载，它主要用来解决函数参数存在多种类型，然后对应参数的不同类型会有不同的返回值类型的情况，那么我们要给这种函数进行类型注解，可以通过重载的方式，解耦参数值类型和返回值类型，将所有可能情况通过重载表现出来。"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "因为本篇文章是图雀社区一杯茶系列，所以关于函数的知识，我们还有一些内容没有讲解到，不过具体内容都是触类旁通，比如注解函数的 "
                },
                {
                  "text": "rest",
                  "code": true
                },
                {
                  "text": " 参数，"
                },
                {
                  "text": "this",
                  "code": true
                },
                {
                  "text": " 等，有兴趣的同学可以查阅官方文档："
                },
                {
                  "text": "TS-函数",
                  "link": true,
                  "url": "https://www.typescriptlang.org/docs/handbook/functions.html"
                },
                {
                  "text": "。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "2b7372ddc7003137e25d870d4b0513ab356c1ae2",
      "id": "sETI3SGhj",
      "articleId": "H2r1tpF_v",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "2b7372ddc7003137e25d870d4b0513ab356c1ae2",
          "id": "1T1H6ziAu",
          "fixed": true,
          "children": [
            {
              "text": "交叉类型、联合类型"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在前三个大章节中，我们我们讲解了基础的 TS 类型，然后接着我们用这些学到的基础类型，去组合形成枚举和接口，去注解函数的参数和返回值，这都是 TS 类型注解到 JS 元素上的实践，那么就像 JS 中有元素运算一样如加减乘除甚至集合运算 “交并补”，TS 中也存在类型的一个运算，这就是我们这一节中要讲解的交叉和联合类型。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "交叉类型"
                }
              ],
              "id": "pPi2CLZ2j"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "交叉类型就是多个类型，通过 "
                },
                {
                  "text": "&",
                  "code": true
                },
                {
                  "text": " 类型运算符，合并成一个类型，这个类型包含了多个类型中的所有类型成员，我们来看个响应体的例子，假如我们有一个查询艺术家的请求，我们要根据查询的结果 -- 响应体，打印对应信息，一般响应体是两类信息的综合："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "请求成功，返回标志请求成功的状态，以及目标数据"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "请求失败，返回标志请求失败的状态，以及错误信息"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "针对这一一个场景，我们就可以使用交叉类型，了解了这样一个场景之后，那么我们再来看一下对应这个场景的具体例子："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface ErrorHandling {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  success: boolean;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  error?: { message: string };"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface ArtistsData {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  artists: { name: string }[];"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const handleArtistsResponse = (response: ArtistsData & ErrorHandling) => {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  if (response.error) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    console.error(response.error.message);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(response.artists);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "};"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们可以看到这个例子，我们的艺术家信息接口（Interface）是 "
                },
                {
                  "text": "ArtistsData",
                  "code": true
                },
                {
                  "text": " ，它是请求成功之后返回的具体数据之一，除了这个，我们的响应体一般还有标志响应是否成功的状态，以及错误的时候的打印信息，所以我们还定义了一个 "
                },
                {
                  "text": "ErrorHandling",
                  "code": true
                },
                {
                  "text": " ，它们两个进行一个交叉类型操作就组成了我们的艺术家响应体："
                },
                {
                  "text": "ArtistsData & ErrorHandling",
                  "code": true
                },
                {
                  "text": " ，然后我们在函数参数里面标志 "
                },
                {
                  "text": "response",
                  "code": true
                },
                {
                  "text": " 为这个交叉类型的结果，并在函数体之类根据请求是否成功的状态 "
                },
                {
                  "text": "reponse.error",
                  "code": true
                },
                {
                  "text": " 判断来打印对应的信息。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "联合类型"
                }
              ],
              "id": "NZSVpDpwR"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "那么联合类型是什么了？联合类型实际上是通过操作符 "
                },
                {
                  "text": "|",
                  "code": true
                },
                {
                  "text": " ，将多个类型进行联合，组成一个复合类型，当用这个复合类型注解一个变量的时候，这个变量可以取这个复合类型中的任意一个类型，这个有点类似枚举了，就是一个变量可能存在多个类型，但是最终只能取一个类型。"
                }
              ]
            },
            {
              "type": "block-quote",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "读者这里可以自行了解联合类型和枚举类型的一个细节差异，本文首先于篇幅，不具体展开。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "接下来我们来看个联合类型应用的场景，比如我们有一个 "
                },
                {
                  "text": "padLeft",
                  "code": true
                },
                {
                  "text": " 函数 -- 左填充空格操作，它负责接收两个参数 "
                },
                {
                  "text": "value",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "padding",
                  "code": true
                },
                {
                  "text": " ，主要目标是实现给 "
                },
                {
                  "text": "value",
                  "code": true
                },
                {
                  "text": " 这个字符串左边添加 "
                },
                {
                  "text": "padding",
                  "code": true
                },
                {
                  "text": " ，可以类比这个 "
                },
                {
                  "text": "padding",
                  "code": true
                },
                {
                  "text": " 就是空格，但是这里的 "
                },
                {
                  "text": "padding",
                  "code": true
                },
                {
                  "text": " 既可以是字符串 "
                },
                {
                  "text": "string",
                  "code": true
                },
                {
                  "text": " 类型，也可以是数字 "
                },
                {
                  "text": "number",
                  "code": true
                },
                {
                  "text": " ，当 "
                },
                {
                  "text": "padding",
                  "code": true
                },
                {
                  "text": " 是字符串时，一个比较简单的例子如下："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const value: string = 'Hello Tuture';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const padding: string = '   ';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "padLeft(value, padding) // => '   Hello Tuture';"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "好的，了解的场景之后，我们马上来一个实战，讲解上面那个例子的一个升级版："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function padLeft(value: string, padding: any) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  if (typeof padding === \"number\") {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return Array(padding + 1).join(\" \") + value;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  if (typeof padding === \"string\") {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return padding + value;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  throw new Error(`Expected string or number, got '${padding}'.`);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "padLeft(\"Hello world\", 4);"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到这个例子，"
                },
                {
                  "text": "padding",
                  "code": true
                },
                {
                  "text": " 我们暂时给了 "
                },
                {
                  "text": "any",
                  "code": true
                },
                {
                  "text": " ，然后函数体里面对 "
                },
                {
                  "text": "string",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "number",
                  "code": true
                },
                {
                  "text": " 类型给了判断，执行对应的 “左空格填充” 操作，这个逻辑对于研发初期是可行的，但是当我们涉及到多人协作开发的时候，其他成员光看这个函数的变量定义，无法了解到底该给这个 "
                },
                {
                  "text": "padding",
                  "code": true
                },
                {
                  "text": " 传递一个什么样类型的值，有可能某个队友进行了如下操作："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "padLeft('Hello world', true)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "啪的一下，这个程序就崩了！所以你看，其实程序还是很脆弱的。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "为了更加明确的约束 "
                },
                {
                  "text": "padding",
                  "code": true
                },
                {
                  "text": " 的类型，我们有必要引进联合类型："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function padLeft(value: string, padding: string | number) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // ...中间一样"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这个时候，我们发现即使再来很多位队友，他们也知道该如何调用这个接口，因为编译器会强制队友写正确的类型，如果还继续写："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "padLeft('Hello world', true)"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "编译器就会提示你如下错误："
                }
              ]
            },
            {
              "type": "image",
              "url": "https://static.tuture.co/c/cea18bc864f7a9b94223dcc718646b02/image-424290f29ec31da8.png",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "ACGRZPUC0"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一小节中我们学习了交叉类型和联合类型，它们是 TS 类型系统中的类型运算的产物，交叉类型是多个类型组成一个类型，最终结果类型是多个类型的总和，而联合类型是多个类型组成一个综合体，最终的结果类型是多个类型之中的某一个类型，交叉类型主要用于构造响应体，联合类型主要用于处理单变量被注解为多类型之一的场景，它还会与我们下一节要讲的字面量类型发生化学反应，实现枚举和处理类型守卫，我们将马上来讲解这些神奇的化学反应。"
                }
              ]
            },
            {
              "type": "heading-two",
              "children": [
                {
                  "text": "字面量类型与类型守卫"
                }
              ],
              "id": "9lVWigs6Z"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "最后我们来聊一聊类型守卫，类型守卫很多场景上都是和联合类型打配合存在的。在讲类型守卫的时候，我们还需要先聊一聊字面量类型，额！其实这三者是相辅相成的。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "字面量类型"
                }
              ],
              "id": "SClpefbLC"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "其实字面量类型我们在第二节中已经或多或少的提到过了，还记得那个报错嘛？"
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "const tutureSlogan: string = 5201314 // 报错 Type '5201314' is not assignable to Type 'string'"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这里的 TS 编译器提示，\"Type '5201314' is not assignable to Type  'string“，这里的 \"Type  '5201314'\" 实际上就是一个字面量类型。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "字面量可是说是 TS 类型系统里面最小的类型，就像 JS 里面的数字 1，它不可能再拆成更小的部分了，一般字面量类型分为两种："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "数字字面量"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "字符串字面量"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "数字字面量"
                }
              ],
              "id": "jkN8SUEAz"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "像 "
                },
                {
                  "text": "520",
                  "code": true
                },
                {
                  "text": " 这个数，把它当做类型使用，它就是数组字面量类型，使用它来注解一个变量的时候是这样的："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let tuture: 520"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当我们初始化这个 tuture 变量的时候，就只能是赋值 520 这个数字了："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "typescript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "tuture = 520; // 正确"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "tuture = 521; // 错误 Type '521' is not assignable to type '520'"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "字符串字面量"
                }
              ],
              "id": "HEHqRMo32"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "对应的字符串字面量类似，我们现在用 "
                },
                {
                  "text": "'520'",
                  "code": true
                },
                {
                  "text": " 这个字符串字面量类型来注解 "
                },
                {
                  "text": "tuture",
                  "code": true
                },
                {
                  "text": " ："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "let tuture: '520';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "tuture = '520';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "tuture = '521'; // Type '\"521\"' is not assignable to type '\"520\"'"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到字面量类型还带来一个特点就是，被注解的为对应字面量类型的变量，在赋值的时候只能赋值为这个被注解的字面量。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面我们了解了字面量类型，并且具体谈了谈它们的特点，那么这么一个单纯的类型，到底有什么特别的地方了？其实字面量类型搭配联合类型有意想不到的威力，我们来举两个例子："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "实现枚举"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "实现类型守卫"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "搭配举例 - 实现枚举效果"
                }
              ],
              "id": "hbJdTTiFw"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当我们搭配联合类型和字面量类型的时候，我们可以实现一定的枚举效果，我们来看个例子，我们买电脑一般都是三种系统，我们可以通过选用这三种电脑类型来获取对应的一个用户的情况，我们现在只给出一个函数的大体框架，具体实现在类型守卫里面详细展开："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getUserInfo(osType: 'Linux' | 'Mac' | 'Windows') { // ... 后续实现 }"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们可以看到上面的例子，"
                },
                {
                  "text": "osType",
                  "code": true
                },
                {
                  "text": " 可以取三种操作系统之一的值，这就类似枚举，我们可以创建一个类似的枚举："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "enum EnumOSType {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  Linux,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  Mac,"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  Windows"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getUserInfo(osType: EnumOSType) {}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面两个例子效果其实差不多，我们就通过 联合类型+字面量类型 实现了一个简单枚举的效果。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "类型守卫"
                }
              ],
              "id": "ZlgAJgdm7"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "类型守卫是我们 联合类型+字面量类型 的又一个应用场景，它主要用于在进行 ”联合“ 的多个类型之间，存在相同的字段，也存在不同的字段，然后需要区分具体什么时候是使用哪个类型，这么说可能比较迷糊，我们来看个例子，加入我们的 "
                },
                {
                  "text": "getUserInfo",
                  "code": true
                },
                {
                  "text": " 函数的参数接收的是 "
                },
                {
                  "text": "os",
                  "code": true
                },
                {
                  "text": " ，它根据 "
                },
                {
                  "text": "os.type",
                  "code": true
                },
                {
                  "text": " 打印对应 "
                },
                {
                  "text": "os",
                  "code": true
                },
                {
                  "text": " 携带的用户信息："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Linux {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  type: 'Linux';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  linuxUserInfo: '极客';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Mac {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  type: 'Mac';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  macUserInfo: '极客+1';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "interface Windows {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  type: 'Windows';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  windowsUserInfo: '极客+2';"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getUserInfo(os: Linux | Mac | Windows) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  console.log(os.linuxUserInfo);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到上面我们将 "
                },
                {
                  "text": "osType",
                  "code": true
                },
                {
                  "text": " 扩充成了 "
                },
                {
                  "text": "os",
                  "code": true
                },
                {
                  "text": " ，然后三种 os 有相同的字段 "
                },
                {
                  "text": "type",
                  "code": true
                },
                {
                  "text": " 和不同的字段 "
                },
                {
                  "text": "xxxUserInfo",
                  "code": true
                },
                {
                  "text": " ，但是当我们函数体类打印 "
                },
                {
                  "text": "os.linuxUserInfo",
                  "code": true
                },
                {
                  "text": " 的时候，TS 编译器报了如下错误："
                }
              ]
            },
            {
              "type": "image",
              "url": "https://static.tuture.co/c/cea18bc864f7a9b94223dcc718646b02/image-8cb30281a741b886.png",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "有同学就有疑问了，我们这里不是联合类型了嘛，那应该 "
                },
                {
                  "text": "os",
                  "code": true
                },
                {
                  "text": " 有 "
                },
                {
                  "text": "Linux",
                  "code": true
                },
                {
                  "text": " 这一类型啊，这么打印为什么会错呢？其实我们要抓住一点，联合类型的最终结果是联合的多个类型之一，也就是 "
                },
                {
                  "text": "os",
                  "code": true
                },
                {
                  "text": " 还可能是 "
                },
                {
                  "text": "Mac",
                  "code": true
                },
                {
                  "text": " 或者 "
                },
                {
                  "text": "Windows",
                  "code": true
                },
                {
                  "text": " ，所以这里打印 "
                },
                {
                  "text": "os.linuxUserInfo",
                  "code": true
                },
                {
                  "text": " 就有问题，所以我们这个时候就需要类型守卫来帮忙了，它主要是根据多个类型中一样的字段，且这个字段是字面量类型来判断，进而执行不同的逻辑来确保类型的执行是正确的，我们来延伸一下上面的那个例子："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "ts",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function getUserInfo(os: Linux | Mac | Windows) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  switch (os.type) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    case 'Linux': {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      console.log(os.linuxUserInfo);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      break;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    case 'Mac': {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      console.log(os.macUserInfo);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      break;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    case 'Windows': {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      console.log(os.windowsUserInfo);"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      break;"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，如果有同学跟着手敲这个函数的话，会发现当针对 "
                },
                {
                  "text": "os.type",
                  "code": true
                },
                {
                  "text": " 进行条件判断之后，在 "
                },
                {
                  "text": "case",
                  "code": true
                },
                {
                  "text": " 语句里面，TS 自动提示了需要取值的类型，比如在 "
                },
                {
                  "text": "Linux",
                  "code": true
                },
                {
                  "text": "  case 语句里面输入 "
                },
                {
                  "text": "os.",
                  "code": true
                },
                {
                  "text": " 会提示 "
                },
                {
                  "text": "linux",
                  "code": true
                },
                {
                  "text": " ："
                }
              ]
            },
            {
              "type": "image",
              "url": "https://static.tuture.co/c/cea18bc864f7a9b94223dcc718646b02/image-112f4036bf738207.png",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "动手实践"
                }
              ],
              "id": "k5oBktfOP"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "了解完字面量类型和类型守卫之后，我们马上运用在我们的待办事项应用里面。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/TodoList.tsx",
          "display": true,
          "commit": "2b7372ddc7003137e25d870d4b0513ab356c1ae2",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先打开 "
                    },
                    {
                      "text": "src/TodoList.tsx",
                      "code": true
                    },
                    {
                      "text": " ，我们近一步完善 "
                    },
                    {
                      "text": "TodoList.tsx",
                      "code": true
                    },
                    {
                      "text": " 的逻辑："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/TodoList.tsx",
              "commit": "2b7372ddc7003137e25d870d4b0513ab356c1ae2",
              "hiddenLines": [
                [
                  49,
                  54
                ],
                [
                  72,
                  94
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面的改动主要有如下几个部分："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们扩展了单个 Todo 的点击下拉菜单的菜单组件，定义了一个 "
                        },
                        {
                          "text": "Action",
                          "code": true
                        },
                        {
                          "text": " 组件，它接收两个参数，"
                        },
                        {
                          "text": "isCompleted",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": " ，前者用来标志现在对 Todo 操作是重做还是完成，后者用来处理点击事件，根据 "
                        },
                        {
                          "text": "todo.id",
                          "code": true
                        },
                        {
                          "text": " 和 操作的类型 "
                        },
                        {
                          "text": "key",
                          "code": true
                        },
                        {
                          "text": " 来处理。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们在 "
                        },
                        {
                          "text": "Action",
                          "code": true
                        },
                        {
                          "text": " 组件的 "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": " 属性里面调用的 "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": " 函数是父组件传下来的函数，所以我们需要额外在 "
                        },
                        {
                          "text": "TodoListProps",
                          "code": true
                        },
                        {
                          "text": " 加上这个 "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": " 函数的类型定义，按照我们之前学习的注解函数的知识，这里我们需要注解参数列表和返回值，因为 "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": " 函数内部执行点击逻辑，不需要返回值，所以我们给它注解了 "
                        },
                        {
                          "text": "void",
                          "code": true
                        },
                        {
                          "text": " 类型，针对参数列表，"
                        },
                        {
                          "text": "todoId",
                          "code": true
                        },
                        {
                          "text": " 比较简单，一般是字符串，所以注解为 "
                        },
                        {
                          "text": "string",
                          "code": true
                        },
                        {
                          "text": " 类型，而 "
                        },
                        {
                          "text": "key",
                          "code": true
                        },
                        {
                          "text": " 标注操作的类型，它是一个字面量联合类型，允许有 "
                        },
                        {
                          "text": "complete",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "delete",
                          "code": true
                        },
                        {
                          "text": " 两种"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们来看 Action 组件，我们在上一步已经讲解它接收两个参数，因此我们新增一个 "
                        },
                        {
                          "text": "ActionProps",
                          "code": true
                        },
                        {
                          "text": " 来注解 Action 组件的参数列表，可以看到其中的 "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": " 和我们上一步讲解的一样，"
                        },
                        {
                          "text": "isCompleted",
                          "code": true
                        },
                        {
                          "text": " 注解为 "
                        },
                        {
                          "text": "boolean",
                          "code": true
                        },
                        {
                          "text": " 。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接在在 Action 组件里我们定义了 Menu  "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": "的处理函数 "
                        },
                        {
                          "text": "handleActionClick ",
                          "code": true
                        },
                        {
                          "text": " 是一个"
                        },
                        {
                          "text": "ClickParam",
                          "code": true
                        },
                        {
                          "text": " 类型，它是从 "
                        },
                        {
                          "text": "antd/lib/menu",
                          "code": true
                        },
                        {
                          "text": " 导入的 ，由组件库提供的，然后我们从参数里面解构出来了 "
                        },
                        {
                          "text": "key",
                          "code": true
                        },
                        {
                          "text": " ，进而通过字面量类型进行类型守卫，处理了对于的 "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": " 逻辑"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们做的一点改进就是在 Menu 里面根据 "
                        },
                        {
                          "text": "isCompleted",
                          "code": true
                        },
                        {
                          "text": " 展示 “重做” 还是 “完成”。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.tsx",
          "display": true,
          "commit": "2b7372ddc7003137e25d870d4b0513ab356c1ae2",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "改进了 "
                    },
                    {
                      "text": "src/TodoList.tsx",
                      "code": true
                    },
                    {
                      "text": " ，接着我们再来改进 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " 里面对应于 "
                    },
                    {
                      "text": "TodoList",
                      "code": true
                    },
                    {
                      "text": " 的逻辑，我们打开 "
                    },
                    {
                      "text": "src/App.tsx",
                      "code": true
                    },
                    {
                      "text": " 对其中的内容做出对应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.tsx",
              "commit": "2b7372ddc7003137e25d870d4b0513ab356c1ae2",
              "hiddenLines": [
                [
                  4,
                  22
                ],
                [
                  27,
                  33
                ],
                [
                  57,
                  71
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面主要就是两处改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "给 "
                        },
                        {
                          "text": "TodoList",
                          "code": true
                        },
                        {
                          "text": " 增加 "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": " 属性"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "实现 "
                        },
                        {
                          "text": "onClick",
                          "code": true
                        },
                        {
                          "text": " 函数，根据字面量类型 "
                        },
                        {
                          "text": "key",
                          "code": true
                        },
                        {
                          "text": " 进行类型守卫处理对应的数据更改逻辑"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "mIt1RbUMa"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这个小结中我们学习了字面量类型和类型守卫，字面量类型与联合类型搭配可以实现枚举的效果，也可以处理类型守卫，字面量类型是 TS 中最原子的类型，它不可以再进行拆解，而类型守卫主要是在针对联合类型时，TS 编译器无法处理，需要通过开发者手工辅助 TS 编译器处理类型而存在。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "3c6721eba0d387c5e55a758232a963a98524b0b4",
      "id": "L61QtcW-f",
      "articleId": null,
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "3c6721eba0d387c5e55a758232a963a98524b0b4",
          "id": "F8dUZok1D",
          "fixed": true,
          "children": [
            {
              "text": "类型别名"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "file": "src/TodoList.tsx",
          "display": true,
          "commit": "3c6721eba0d387c5e55a758232a963a98524b0b4",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/TodoList.tsx",
              "commit": "3c6721eba0d387c5e55a758232a963a98524b0b4",
              "hiddenLines": [
                [
                  18,
                  33
                ],
                [
                  42,
                  54
                ],
                [
                  65,
                  90
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "ff925f8d8e6f44d9051c22ed7c54e9727d015c15",
      "id": "ar7R_mZZg",
      "articleId": null,
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "ff925f8d8e6f44d9051c22ed7c54e9727d015c15",
          "id": "bnH3gOQTz",
          "fixed": true,
          "children": [
            {
              "text": "类与泛型"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        },
        {
          "file": "src/App.tsx",
          "display": true,
          "commit": "ff925f8d8e6f44d9051c22ed7c54e9727d015c15",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/App.tsx",
              "commit": "ff925f8d8e6f44d9051c22ed7c54e9727d015c15",
              "hiddenLines": [
                [
                  21,
                  35
                ],
                [
                  44,
                  92
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/TodoInput.tsx",
          "display": true,
          "commit": "ff925f8d8e6f44d9051c22ed7c54e9727d015c15",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/TodoInput.tsx",
              "commit": "ff925f8d8e6f44d9051c22ed7c54e9727d015c15",
              "hiddenLines": [
                [
                  5,
                  24
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/TodoList.tsx",
          "display": true,
          "commit": "ff925f8d8e6f44d9051c22ed7c54e9727d015c15",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/TodoList.tsx",
              "commit": "ff925f8d8e6f44d9051c22ed7c54e9727d015c15",
              "hiddenLines": [
                [
                  0,
                  3
                ],
                [
                  12,
                  83
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "github": "https://github.com/pftom/typescript-tea",
  "version": "v1",
  "remotes": [
    {
      "name": "gitee",
      "refs": {
        "fetch": "https://gitee.com/tuture/typescript-tea.git",
        "push": "https://gitee.com/tuture/typescript-tea.git"
      }
    },
    {
      "name": "origin",
      "refs": {
        "fetch": "https://github.com/tuture-dev/typescript-tea.git",
        "push": "https://github.com/tuture-dev/typescript-tea.git"
      }
    }
  ]
}